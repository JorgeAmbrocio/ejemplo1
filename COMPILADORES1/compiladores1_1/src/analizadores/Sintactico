package analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import arbol.*;
import arbol.expresiones.*;
import arbol.expresiones.aritmeticos.*;
import arbol.expresiones.relacionales.*;
import arbol.expresiones.logicas.*;
import arbol.instrucciones.*;
import arbol.instrucciones.sentencias.*;
import arbol.entorno.*;
import interfaz.*;


parser code 
{:   

    /* Variable que guarda el árbol de sintáxis abstracta generado luego del análisis sintáctico */
    public AST AST;
    
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " + s.value + ".");
            Errores errrores = new Errores(Errores.enumTipoError.sintactico , "Error Sintáctico en la Línea " + (s.left) +" Columna " + s.right + ". No se esperaba este componente: " +s.value+".");
    //Interfaz.lista_errores.add(new CError("Sintáctico", "No se esperaba este componente '" + s.value + "'", s.left, s.right));
    
    } 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  
:}

terminal String mas,menos,por,division,potencia,parizquierdo,parderecho,igual,puntoycoma,llaveizq,llaveder,rint,rdouble,rchar,rboolean,rstring,rclass,coma,rvoid;
terminal String entero,doble,rtrue,rfalse,cadena,caracter,id,rprintln,rprint,rprinttabla,rgraficardot;
terminal String menorque,mayorque,menorigualque,mayorigualque,igualigual,diferenteque,or,and,xor,not,rif,relse,rwhile,rbreak,rcontinue,modulo,rfor,rdo,rswitch,rcase,rdefault,dospuntos,interrogacion,masmas,menosmenos,rpow,rreturn,corizquierdo,corderecho,rnew,rpublic,rprotected,rprivate,rabstract,rstatic,rfinal,rstr,rtoDouble,rtoInt,rtoChar,rextends,punto,rnull,rimport,
rgraph,rsuper,rread_file,rwrite_file,rinstanceof,rread;
terminal String rgraficarentornos;

terminal umenos; //Para manejar el - E

non terminal INICIO;
non terminal LinkedList<Instruccion> L_INSTRUCCIONES, L_INSTRUCCIONES_CLASE;
non terminal Instruccion INSTRUCCION, INSTRUCCION_CLASE, DECLARACION,ASIGNACION, IMPRIMIR,BREAK, CONTINUE ,SENTENCIA_IF, SENTENCIA_WHILE, SENTENCIA_SWITCH, SENTENCIA_FOR, ASIGNACION_DECLARACION,SENTENCIA_DO, SENTENCIA_INCREMENTO, SENTENCIA_DECREMENTO, SENTENCIA_IMPORT,  METODO;
non terminal Instruccion  SENTENCIA_LLAMADA, RETORNO, DECLARACION_CLASE, SENTENCIA_GRAFICAR_ENTORNO, CONSTRUCTOR, GRAFICAR_DOT;
non terminal Expresion E, E1;
non terminal Tipo T, T2;
non terminal LinkedList<CondicionIf> L_IF;
non terminal LinkedList<CondicionSwitch> L_CASOS;
non terminal LinkedList<Declaracion> PARAMETROS;
non terminal LinkedList<Expresion> PARAMETROS_LLAMADA;
non terminal LinkedList<Id> ID;
non terminal LinkedList<Integer> DIMENSIONES_VACIAS, DIMENSIONES_LLENAS;
non terminal Bloque BLOQUE;
non terminal Bloque BLOQUE_CLASE;
non terminal Arreglo LISTA_ARREGLO, LISTA_ARREGLO2;
non terminal Id ID_ACCESOS;


//Operaciones numericas
//precedence left interrogacion; //Así lo tenía antes
precedence right interrogacion,dospuntos;


precedence left or;
precedence left and;
precedence left xor;
precedence right not;

precedence left menorque,menorigualque,mayorque,mayorigualque,igualigual,diferenteque;

precedence left mas,menos;
precedence left por,division,modulo;
precedence left potencia;
precedence left masmas,menosmenos; //Así lo tenía antes

precedence left punto, corizquierdo; //Para los accesos

precedence left umenos;

start with INICIO;

INICIO::= L_INSTRUCCIONES:a
    {:
    //se guarda el AST, que es la lista principal de instrucciones en la variable
    //AST que se definió dentro del parser
    
        parser.AST = new AST(a);
    :}
;


L_INSTRUCCIONES ::= L_INSTRUCCIONES:a INSTRUCCION:b {: RESULT = a; RESULT.add(b); :}
            | INSTRUCCION:a {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

INSTRUCCION ::= DECLARACION:a puntoycoma {: RESULT = a; :}
            | ASIGNACION:a puntoycoma {: RESULT = a; :}
            | IMPRIMIR:a puntoycoma{: RESULT = a; :}
            | BREAK:a puntoycoma {: RESULT = a ;:}
            | CONTINUE:a puntoycoma {: RESULT = a;:}
            | SENTENCIA_IF:a  {: RESULT = a; :}
            | SENTENCIA_WHILE:a  {: RESULT = a; :}
            | SENTENCIA_SWITCH:a  {: RESULT = a ;:}
            | SENTENCIA_FOR:a  {: RESULT = a ;:}
            | SENTENCIA_DO:a puntoycoma {: RESULT = a; :}
            | SENTENCIA_INCREMENTO:a {: RESULT = a; :}
            | SENTENCIA_DECREMENTO:a {: RESULT = a; :}
            | SENTENCIA_IMPORT:a puntoycoma {: RESULT = a ;:}
            | METODO:a {: RESULT = a; :}
            | CONSTRUCTOR:a {: RESULT = a; :}
            | SENTENCIA_LLAMADA:a {: RESULT = a; :}
            | RETORNO:a {: RESULT =a; :}
            | DECLARACION_CLASE:a {: RESULT = a ; :}
            | SENTENCIA_GRAFICAR_ENTORNO:a {: RESULT = a; :}
            | GRAFICAR_DOT:a {: RESULT =a; :}
;

GRAFICAR_DOT ::= rgraficardot parizquierdo E:a coma E:b parderecho puntoycoma {: RESULT = new GraficarDot(a,b); :}
;

INSTRUCCION_CLASE ::= METODO:a {: RESULT = a; :}
            |DECLARACION:a puntoycoma {: RESULT = a; :}
            |ASIGNACION:a puntoycoma {: RESULT = a; :}
;

METODO ::= T2:a id:b parizquierdo PARAMETROS:c parderecho BLOQUE:d {: RESULT = new DeclaraMetodoFuncion(a, b,c,d ); :}
        |T2:a id:b parizquierdo parderecho BLOQUE:d {: RESULT = new DeclaraMetodoFuncion(a, b,d ); :}
        |ID:b parizquierdo PARAMETROS:c parderecho BLOQUE:d {: RESULT = new DeclaraMetodoFuncion( new Acceso(b) ,c,d ); :}
        |ID:b parizquierdo parderecho BLOQUE:d {: RESULT = new DeclaraMetodoFuncion(new Acceso(b),d ); :}
;

DECLARACION ::= 
        T2:a id:b igual E1:c {: RESULT = new Declaracion(a, b, c, bleft, bright); :}
        | T2:a id:b {: RESULT = new Declaracion(a, b, bleft, bright); :}
        
;

ASIGNACION ::= 
                ID:a igual E1:b {: RESULT = new Asignacion(new Acceso(a) ,aleft,aright ,b); :}
                //| id:a igual rnew id:b PARAMETROS_LLAMADA:c {: RESULT = new AsignacionInstancia(); :}
                //| id:a L_DIMENSIONES_EXPRESION:b igual E:c {: RESULT = new AsignacionArreglo(a,aleft,aright,b,c); :}
;

L_INSTRUCCIONES_CLASE ::= L_INSTRUCCIONES_CLASE:a INSTRUCCION_CLASE:b {: RESULT = a; RESULT.add(b); :}
            | INSTRUCCION_CLASE:a {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

BLOQUE_CLASE ::= llaveizq:z llaveder:y     {: RESULT = null; :}
            | llaveizq:z L_INSTRUCCIONES_CLASE:a llaveder:y {: RESULT = new Bloque(a); :}
;

DECLARACION_CLASE ::= rclass id:a BLOQUE_CLASE:b {: RESULT = new DeclaracionClase (a, b, aleft, aright); :} 
;

SENTENCIA_LLAMADA ::= ID:a parizquierdo PARAMETROS_LLAMADA:b parderecho puntoycoma {: RESULT = new InsLlamadaMF(new Acceso(a), b,aleft, aright); :}
            | ID:a parizquierdo  parderecho puntoycoma {: RESULT = new InsLlamadaMF(new Acceso(a),aleft, aright); :}
;

PARAMETROS_LLAMADA ::= PARAMETROS_LLAMADA:a coma E:b {:a.add(b) ; RESULT = a; :}
            | E:a {: RESULT = new LinkedList<>() ; RESULT.add (a);:}
;

PARAMETROS ::= PARAMETROS:a coma DECLARACION:b {: a.add((Declaracion)b); RESULT = a; :}
            | DECLARACION:a {: RESULT = new LinkedList<>() ; RESULT.add((Declaracion)a); :}
;

SENTENCIA_GRAFICAR_ENTORNO ::= rgraficarentornos parizquierdo  parderecho puntoycoma {: RESULT = new GraficarEntornos(); :}
;

RETORNO ::= rreturn puntoycoma {: RESULT = new Return(); :}
            | rreturn E:a puntoycoma {: RESULT = new Return (a); :}
;

IMPRIMIR ::= rprintln parizquierdo E:a parderecho {: RESULT = new Imprimir(a,true); :}
    | rprint parizquierdo E:a parderecho {: RESULT = new Imprimir(a,false); :}
;

BREAK ::= rbreak:a {:RESULT = new Break(aleft, aright);:}
;

CONTINUE ::= rcontinue:a {:RESULT = new Continue(aleft, aright);:}
;

SENTENCIA_IMPORT ::= rimport cadena:a {: RESULT = new Import (a , aleft , aright); :}
;

SENTENCIA_INCREMENTO ::= ID:a masmas puntoycoma {: RESULT = new InsIncremento( new Acceso(a), aleft, aright) ; :}
;

SENTENCIA_DECREMENTO ::= ID:a menosmenos puntoycoma {: RESULT = new InsDecremento( new Acceso(a), aleft, aright) ; :}
;

SENTENCIA_DO ::= rdo BLOQUE:a rwhile parizquierdo E:b parderecho {: RESULT = new Do (b,a); :} 
;

SENTENCIA_FOR ::= rfor parizquierdo ASIGNACION_DECLARACION:a puntoycoma E:b puntoycoma E:c parderecho BLOQUE:d {: RESULT = new For(a,b,c,d); :}
;

ASIGNACION_DECLARACION ::= ASIGNACION:a {: RESULT = a; :}
            | DECLARACION:a {: RESULT = a; :}
;

SENTENCIA_SWITCH ::= rswitch parizquierdo E:a parderecho llaveizq L_CASOS:b llaveder {:RESULT =new Switch(a,b);:}       
;

L_CASOS ::= L_CASOS:a rcase E:b dospuntos L_INSTRUCCIONES:c {: a.add(new CondicionSwitch(b,c)) ; RESULT= a; :}
            |L_CASOS:a rdefault dospuntos L_INSTRUCCIONES:c {: a.add(new CondicionSwitch(c)) ;RESULT = a;:}
            |rcase E:b dospuntos L_INSTRUCCIONES:c {:RESULT = new LinkedList<>(); RESULT.add(new CondicionSwitch(b,c));:}
            |rdefault dospuntos L_INSTRUCCIONES:c {:RESULT = new LinkedList<>(); RESULT.add(new CondicionSwitch(c));:}
;


SENTENCIA_WHILE ::= rwhile:z parizquierdo:x E:a parderecho:y BLOQUE:b {: RESULT = new While (a, b,zleft, zright) ;:} // crear nueva instruccion
;

SENTENCIA_IF ::= L_IF:a relse BLOQUE:c  {:RESULT = new If (a,c);:} // nuevo if con lista de condiciones con bloque de else
        | L_IF:a {: RESULT = new If (a);:} // crear un nuevo if con lista de condiciones sin bloque de else
;

L_IF ::= L_IF:a relse:z rif:y parizquierdo:x E:b parderecho:w BLOQUE:c {: a.add(new CondicionIf (b, c, bleft, bright)); RESULT = a ; :} // crear linked list y añadir a la lista
        | rif:z parizquierdo:x E:a parderecho:y BLOQUE:b {: RESULT = new LinkedList<>(); RESULT.add(new CondicionIf (a, b, aleft , aright));:} // crear linkedlist de condiciones 
;

BLOQUE ::= llaveizq:z llaveder:y     {: RESULT = new Bloque(); :}
        | llaveizq:z L_INSTRUCCIONES:a llaveder:y {: RESULT = new Bloque(a); :}
;




ID ::= ID:a punto ID_ACCESOS:b {: a.add(b); RESULT = a; :}
        | ID_ACCESOS:a {: RESULT  = new LinkedList<>(); RESULT.add(a); :}
;

ID_ACCESOS ::= id:a {: RESULT = new Id(a, aleft , aright); :}
        | id:a DIMENSIONES_LLENAS:b {: RESULT = new Id(a, b, aleft , aright); :}
        //| id:a parizquierdo PARAMETROS_LLAMADA:b parderecho {: RESULT = new ExpLlamadaMF(a, b, aleft,aright); :}
;



T ::= rint:a {: RESULT = new Tipo(Tipo.EnumTipo.entero); :}
    | rchar {: RESULT = new Tipo(Tipo.EnumTipo.caracter); :}
    | rboolean {: RESULT = new Tipo(Tipo.EnumTipo.booleano); :}
    | rdouble {: RESULT = new Tipo(Tipo.EnumTipo.doble); :}
    | rstring {: RESULT = new Tipo(Tipo.EnumTipo.cadena); :}
    | rvoid {: RESULT = new Tipo(Tipo.EnumTipo.metodo); :}
    | id:a {: RESULT = new Tipo(Tipo.EnumTipo.objeto, a); :}
;

T2 ::= T:a DIMENSIONES_VACIAS:b {: a.dimension = b.size(); RESULT = a; :}
    | T:a {: RESULT = a; :}
;



LISTA_ARREGLO ::= llaveizq llaveder {: RESULT = new Arreglo (); :}
        | llaveizq PARAMETROS_LLAMADA:a llaveder {: RESULT = new Arreglo(a); :}
        | llaveizq LISTA_ARREGLO2:a llaveder {: RESULT = a; :}
;

LISTA_ARREGLO2 ::= LISTA_ARREGLO2:a coma LISTA_ARREGLO:b {: a.contenido.add(b); a.agregar() ;RESULT = a; :}
        | LISTA_ARREGLO:a {: RESULT =  new Arreglo(); RESULT.contenido.add(a); RESULT.calcularProfundidad(); :}
;

DIMENSIONES_VACIAS ::= DIMENSIONES_VACIAS:a corizquierdo corderecho {: a.add(0); RESULT = a; :}
        | corizquierdo corderecho {: RESULT = new LinkedList<>() ; RESULT.add(0); :}
;

DIMENSIONES_LLENAS ::= DIMENSIONES_LLENAS:a corizquierdo entero:b corderecho {: a.add(Integer.parseInt(b)); RESULT = a; :}
        | corizquierdo entero:a corderecho {: RESULT = new LinkedList<>() ; RESULT.add(Integer.parseInt(a)); :}
;

E1 ::= LISTA_ARREGLO:a {: RESULT = a; :} 
        | E:a {: RESULT = a; :}
;

E ::= 
        entero:a {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.entero), a); :}
        | caracter:a {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.caracter), a.replace("\'","")); :}
        //| caracter:a {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.caracter), a); :}
        | rtrue {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.booleano), true); :}
        | rfalse {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.booleano), false); :}
        | doble:a {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.doble), a); :}
        | cadena:a {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.cadena), a ); :}
        //| cadena:a {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.cadena), a); :} este no quita las comillas
        | ID:a {: RESULT = new Acceso(a); :}
        | ID:a masmas {: RESULT = new ExpIncremento ( new Acceso(a), aleft,aright) ;:}
        | ID:a menosmenos {: RESULT = new ExpDecremento( new Acceso(a), aleft,aright) ;:}
        | ID:a parizquierdo PARAMETROS_LLAMADA:b parderecho {: RESULT = new ExpLlamadaMF(new Acceso(a), b, aleft,aright); :}
        | ID:a parizquierdo parderecho {: RESULT = new ExpLlamadaMF(new Acceso(a), aleft,aright); :}
        | E:a mas:b E:c {: RESULT = new Suma(aleft, aright, a, c) ; :}
        | E:a menos:b E:c {: RESULT = new Resta (a,c, aleft, aright) ;:}
        | E:a por:b E:c {: RESULT = new Multiplicacion(a,c, aleft, aright);:}
        | E:a division:b E:c {: RESULT = new Division(a,c,aleft,aright); :}
        | E:a potencia:b E:c {: RESULT = new Potencia(a,c,aleft,aright);:}
        | E:a modulo:b E:c {: RESULT  = new Modulo(a,c,aleft,aright);:}
        | E:a mayorque:b E:c {: RESULT = new Mayor(a,c,aleft, aright);:}
        | E:a menorque:b E:c {: RESULT = new Menor(a,c,aleft, aright);:}
        | E:a mayorigualque:b E:c {: RESULT = new MayorIgual(a,c,aleft, aright);:}
        | E:a menorigualque:b E:c {: RESULT = new MenorIgual(a,c,aleft, aright);:}
        | E:a igualigual:b E:c {: RESULT = new Igual(a,c,aleft, aright);:}
        | E:a diferenteque:b E:c {: RESULT = new Diferente(a,c,aleft, aright);:}
        | E:a or:b E:c {: RESULT = new O(a,c,aleft,aright);:}
        | E:a and:b E:c {: RESULT = new Y(a,c,aleft,aright);:}
        | E:a xor:b E:c {: RESULT = new Xor(a,c,aleft,aright);:}
        | not:a E:b {: RESULT =new Not(b, aleft,aright);:}
        | menos E:a {:RESULT = new Negativo (a, aleft, aright); :}
        | parizquierdo E:a parderecho {:RESULT = a;:}
        | rnew T:a DIMENSIONES_LLENAS:b {: RESULT = new Arreglo(a, b); :}
        | rnew T:a parizquierdo PARAMETROS_LLAMADA:b parderecho {: RESULT = new Objeto(a, b , aleft, aright); :}
        | rnew T:a parizquierdo  parderecho {: RESULT = new Objeto(a,  aleft, aright); :}
        | rnull {: RESULT = new Literal(new Tipo(Tipo.EnumTipo.nulo) , Tipo.EnumTipo.nulo); :}
        
;


//ID ::= ID:a punto id:b {: a.add(new Id(b, bleft,bright)); RESULT = a; :}
  //      | id:a {: RESULT  = new LinkedList<>(); RESULT.add(new Id(a, aleft,aright)); :}
//;



