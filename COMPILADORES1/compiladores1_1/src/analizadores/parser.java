
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import arbol.*;
import arbol.expresiones.*;
import arbol.expresiones.aritmeticos.*;
import arbol.expresiones.relacionales.*;
import arbol.expresiones.logicas.*;
import arbol.instrucciones.*;
import arbol.instrucciones.sentencias.*;
import arbol.entorno.*;
import interfaz.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\113\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\004\000\002\004\003\000\002\004" +
    "\003\000\002\004\004\000\002\022\004\000\002\020\005" +
    "\000\002\021\005\000\002\017\010\000\002\015\013\000" +
    "\002\016\003\000\002\016\003\000\002\014\011\000\002" +
    "\026\007\000\002\026\006\000\002\026\006\000\002\026" +
    "\005\000\002\010\003\000\002\011\003\000\002\013\007" +
    "\000\002\012\005\000\002\012\003\000\002\025\011\000" +
    "\002\025\007\000\002\027\004\000\002\027\005\000\002" +
    "\005\006\000\002\005\004\000\002\006\005\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\007\006\000\002\007\006\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\003\000" +
    "\002\023\004\000\002\023\004\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\004\000\002\023\004\000" +
    "\002\023\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\042\017\005\020\011\021\016\022\041\023" +
    "\014\035\031\036\043\037\013\053\032\055\030\056\007" +
    "\057\040\061\037\062\036\063\045\115\035\001\002\000" +
    "\004\014\243\001\002\000\004\035\uffd8\001\002\000\052" +
    "\002\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023" +
    "\ufffe\035\ufffe\036\ufffe\037\ufffe\053\ufffe\055\ufffe\056\ufffe" +
    "\057\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe\115" +
    "\ufffe\001\002\000\004\014\uffe4\001\002\000\004\014\242" +
    "\001\002\000\004\035\uffd5\001\002\000\052\002\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\035\ufff5" +
    "\036\ufff5\037\ufff5\053\ufff5\055\ufff5\056\ufff5\057\ufff5\061" +
    "\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\115\ufff5\001\002" +
    "\000\004\011\237\001\002\000\004\035\uffd4\001\002\000" +
    "\004\035\234\001\002\000\004\035\uffd7\001\002\000\054" +
    "\002\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\053\uffe0\054\225\055\uffe0" +
    "\056\uffe0\057\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065" +
    "\uffe0\115\uffe0\001\002\000\004\014\224\001\002\000\052" +
    "\002\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023" +
    "\ufff3\035\ufff3\036\ufff3\037\ufff3\053\ufff3\055\ufff3\056\ufff3" +
    "\057\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\115" +
    "\ufff3\001\002\000\004\014\223\001\002\000\052\002\ufff6" +
    "\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\035" +
    "\ufff6\036\ufff6\037\ufff6\053\ufff6\055\ufff6\056\ufff6\057\ufff6" +
    "\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\115\ufff6\001" +
    "\002\000\052\002\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8" +
    "\022\ufff8\023\ufff8\035\ufff8\036\ufff8\037\ufff8\053\ufff8\055" +
    "\ufff8\056\ufff8\057\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8" +
    "\065\ufff8\115\ufff8\001\002\000\052\002\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\035\ufff2\036\ufff2" +
    "\037\ufff2\053\ufff2\055\ufff2\056\ufff2\057\ufff2\061\ufff2\062" +
    "\ufff2\063\ufff2\064\ufff2\065\ufff2\115\ufff2\001\002\000\004" +
    "\014\222\001\002\000\004\014\221\001\002\000\004\011" +
    "\215\001\002\000\010\013\174\070\211\071\212\001\002" +
    "\000\004\011\205\001\002\000\004\014\204\001\002\000" +
    "\052\002\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7" +
    "\023\ufff7\035\ufff7\036\ufff7\037\ufff7\053\ufff7\055\ufff7\056" +
    "\ufff7\057\ufff7\061\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7" +
    "\115\ufff7\001\002\000\004\033\203\001\002\000\004\015" +
    "\170\001\002\000\004\011\155\001\002\000\004\014\uffe3" +
    "\001\002\000\004\035\uffd6\001\002\000\044\002\000\017" +
    "\005\020\011\021\016\022\041\023\014\035\031\036\043" +
    "\037\013\053\032\055\030\056\007\057\040\061\037\062" +
    "\036\063\045\115\035\001\002\000\004\011\152\001\002" +
    "\000\004\002\151\001\002\000\004\011\046\001\002\000" +
    "\026\005\053\011\047\027\056\030\057\031\054\032\060" +
    "\033\052\034\055\035\050\052\051\001\002\000\026\005" +
    "\053\011\047\027\056\030\057\031\054\032\060\033\052" +
    "\034\055\035\050\052\051\001\002\000\052\004\uffc5\005" +
    "\uffc5\006\uffc5\007\uffc5\010\uffc5\012\uffc5\014\uffc5\041\uffc5" +
    "\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050" +
    "\uffc5\051\uffc5\060\uffc5\066\uffc5\070\145\071\146\001\002" +
    "\000\026\005\053\011\047\027\056\030\057\031\054\032" +
    "\060\033\052\034\055\035\050\052\051\001\002\000\046" +
    "\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\012\uffcc\014" +
    "\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc" +
    "\047\uffcc\050\uffcc\051\uffcc\060\uffcc\066\uffcc\001\002\000" +
    "\026\005\053\011\047\027\056\030\057\031\054\032\060" +
    "\033\052\034\055\035\050\052\051\001\002\000\046\004" +
    "\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\012\uffcf\014\uffcf" +
    "\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047" +
    "\uffcf\050\uffcf\051\uffcf\060\uffcf\066\uffcf\001\002\000\046" +
    "\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\012\uffd0\014" +
    "\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0" +
    "\047\uffd0\050\uffd0\051\uffd0\060\uffd0\066\uffd0\001\002\000" +
    "\046\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\012\uffd1" +
    "\014\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046" +
    "\uffd1\047\uffd1\050\uffd1\051\uffd1\060\uffd1\066\uffd1\001\002" +
    "\000\046\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\012" +
    "\uffcd\014\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd" +
    "\046\uffcd\047\uffcd\050\uffcd\051\uffcd\060\uffcd\066\uffcd\001" +
    "\002\000\046\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce" +
    "\012\uffce\014\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045" +
    "\uffce\046\uffce\047\uffce\050\uffce\051\uffce\060\uffce\066\uffce" +
    "\001\002\000\042\004\100\005\067\006\077\007\074\010" +
    "\062\012\063\041\101\042\065\043\073\044\064\045\071" +
    "\046\076\047\066\050\070\051\072\060\075\001\002\000" +
    "\026\005\053\011\047\027\056\030\057\031\054\032\060" +
    "\033\052\034\055\035\050\052\051\001\002\000\004\015" +
    "\120\001\002\000\026\005\053\011\047\027\056\030\057" +
    "\031\054\032\060\033\052\034\055\035\050\052\051\001" +
    "\002\000\026\005\053\011\047\027\056\030\057\031\054" +
    "\032\060\033\052\034\055\035\050\052\051\001\002\000" +
    "\026\005\053\011\047\027\056\030\057\031\054\032\060" +
    "\033\052\034\055\035\050\052\051\001\002\000\026\005" +
    "\053\011\047\027\056\030\057\031\054\032\060\033\052" +
    "\034\055\035\050\052\051\001\002\000\026\005\053\011" +
    "\047\027\056\030\057\031\054\032\060\033\052\034\055" +
    "\035\050\052\051\001\002\000\026\005\053\011\047\027" +
    "\056\030\057\031\054\032\060\033\052\034\055\035\050" +
    "\052\051\001\002\000\026\005\053\011\047\027\056\030" +
    "\057\031\054\032\060\033\052\034\055\035\050\052\051" +
    "\001\002\000\026\005\053\011\047\027\056\030\057\031" +
    "\054\032\060\033\052\034\055\035\050\052\051\001\002" +
    "\000\026\005\053\011\047\027\056\030\057\031\054\032" +
    "\060\033\052\034\055\035\050\052\051\001\002\000\026" +
    "\005\053\011\047\027\056\030\057\031\054\032\060\033" +
    "\052\034\055\035\050\052\051\001\002\000\026\005\053" +
    "\011\047\027\056\030\057\031\054\032\060\033\052\034" +
    "\055\035\050\052\051\001\002\000\026\005\053\011\047" +
    "\027\056\030\057\031\054\032\060\033\052\034\055\035" +
    "\050\052\051\001\002\000\026\005\053\011\047\027\056" +
    "\030\057\031\054\032\060\033\052\034\055\035\050\052" +
    "\051\001\002\000\026\005\053\011\047\027\056\030\057" +
    "\031\054\032\060\033\052\034\055\035\050\052\051\001" +
    "\002\000\046\004\100\005\067\006\077\007\074\010\062" +
    "\012\uffc1\014\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045" +
    "\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\060\075\066\uffc1" +
    "\001\002\000\046\004\uffcb\005\uffcb\006\077\007\074\010" +
    "\062\012\uffcb\014\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb" +
    "\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\060\075\066" +
    "\uffcb\001\002\000\046\004\uffc9\005\uffc9\006\uffc9\007\uffc9" +
    "\010\062\012\uffc9\014\uffc9\041\uffc9\042\uffc9\043\uffc9\044" +
    "\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\060\uffc9" +
    "\066\uffc9\001\002\000\046\004\100\005\067\006\077\007" +
    "\074\010\062\012\uffbd\014\uffbd\041\uffbd\042\uffbd\043\uffbd" +
    "\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\060" +
    "\075\066\uffbd\001\002\000\046\004\uffc6\005\uffc6\006\uffc6" +
    "\007\uffc6\010\062\012\uffc6\014\uffc6\041\uffc6\042\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6" +
    "\060\uffc6\066\uffc6\001\002\000\046\004\uffc8\005\uffc8\006" +
    "\uffc8\007\uffc8\010\062\012\uffc8\014\uffc8\041\uffc8\042\uffc8" +
    "\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051" +
    "\uffc8\060\uffc8\066\uffc8\001\002\000\046\004\100\005\067" +
    "\006\077\007\074\010\062\012\uffbf\014\uffbf\041\uffbf\042" +
    "\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf" +
    "\051\uffbf\060\075\066\uffbf\001\002\000\046\004\100\005" +
    "\067\006\077\007\074\010\062\012\uffba\014\uffba\041\101" +
    "\042\065\043\073\044\064\045\071\046\076\047\uffba\050" +
    "\uffba\051\uffba\060\075\066\uffba\001\002\000\046\004\100" +
    "\005\067\006\077\007\074\010\062\012\uffbe\014\uffbe\041" +
    "\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe" +
    "\050\uffbe\051\uffbe\060\075\066\uffbe\001\002\000\046\004" +
    "\100\005\067\006\077\007\074\010\062\012\uffbb\014\uffbb" +
    "\041\101\042\065\043\073\044\064\045\071\046\076\047" +
    "\uffbb\050\uffbb\051\072\060\075\066\uffbb\001\002\000\046" +
    "\004\uffca\005\uffca\006\077\007\074\010\062\012\uffca\014" +
    "\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca" +
    "\047\uffca\050\uffca\051\uffca\060\075\066\uffca\001\002\000" +
    "\046\004\100\005\067\006\077\007\074\010\062\012\uffbc" +
    "\014\uffbc\041\101\042\065\043\073\044\064\045\071\046" +
    "\076\047\uffbc\050\070\051\072\060\075\066\uffbc\001\002" +
    "\000\046\004\100\005\067\006\077\007\074\010\062\012" +
    "\uffc2\014\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2" +
    "\046\uffc2\047\uffc2\050\uffc2\051\uffc2\060\075\066\uffc2\001" +
    "\002\000\046\004\100\005\067\006\077\007\074\010\062" +
    "\012\uffc0\014\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045" +
    "\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\060\075\066\uffc0" +
    "\001\002\000\006\064\123\065\122\001\002\000\010\016" +
    "\134\064\133\065\132\001\002\000\004\066\130\001\002" +
    "\000\026\005\053\011\047\027\056\030\057\031\054\032" +
    "\060\033\052\034\055\035\050\052\051\001\002\000\042" +
    "\004\100\005\067\006\077\007\074\010\062\041\101\042" +
    "\065\043\073\044\064\045\071\046\076\047\066\050\070" +
    "\051\072\060\075\066\125\001\002\000\042\017\005\020" +
    "\011\021\016\022\041\023\014\035\031\036\043\037\013" +
    "\053\032\055\030\056\007\057\040\061\037\062\036\063" +
    "\045\115\035\001\002\000\050\016\uffe6\017\005\020\011" +
    "\021\016\022\041\023\014\035\031\036\043\037\013\053" +
    "\032\055\030\056\007\057\040\061\037\062\036\063\045" +
    "\064\uffe6\065\uffe6\115\035\001\002\000\052\002\uffff\016" +
    "\uffff\017\uffff\020\uffff\021\uffff\022\uffff\023\uffff\035\uffff" +
    "\036\uffff\037\uffff\053\uffff\055\uffff\056\uffff\057\uffff\061" +
    "\uffff\062\uffff\063\uffff\064\uffff\065\uffff\115\uffff\001\002" +
    "\000\042\017\005\020\011\021\016\022\041\023\014\035" +
    "\031\036\043\037\013\053\032\055\030\056\007\057\040" +
    "\061\037\062\036\063\045\115\035\001\002\000\050\016" +
    "\uffe5\017\005\020\011\021\016\022\041\023\014\035\031" +
    "\036\043\037\013\053\032\055\030\056\007\057\040\061" +
    "\037\062\036\063\045\064\uffe5\065\uffe5\115\035\001\002" +
    "\000\004\066\140\001\002\000\026\005\053\011\047\027" +
    "\056\030\057\031\054\032\060\033\052\034\055\035\050" +
    "\052\051\001\002\000\052\002\uffe9\016\uffe9\017\uffe9\020" +
    "\uffe9\021\uffe9\022\uffe9\023\uffe9\035\uffe9\036\uffe9\037\uffe9" +
    "\053\uffe9\055\uffe9\056\uffe9\057\uffe9\061\uffe9\062\uffe9\063" +
    "\uffe9\064\uffe9\065\uffe9\115\uffe9\001\002\000\042\004\100" +
    "\005\067\006\077\007\074\010\062\041\101\042\065\043" +
    "\073\044\064\045\071\046\076\047\066\050\070\051\072" +
    "\060\075\066\136\001\002\000\042\017\005\020\011\021" +
    "\016\022\041\023\014\035\031\036\043\037\013\053\032" +
    "\055\030\056\007\057\040\061\037\062\036\063\045\115" +
    "\035\001\002\000\050\016\uffe8\017\005\020\011\021\016" +
    "\022\041\023\014\035\031\036\043\037\013\053\032\055" +
    "\030\056\007\057\040\061\037\062\036\063\045\064\uffe8" +
    "\065\uffe8\115\035\001\002\000\042\017\005\020\011\021" +
    "\016\022\041\023\014\035\031\036\043\037\013\053\032" +
    "\055\030\056\007\057\040\061\037\062\036\063\045\115" +
    "\035\001\002\000\050\016\uffe7\017\005\020\011\021\016" +
    "\022\041\023\014\035\031\036\043\037\013\053\032\055" +
    "\030\056\007\057\040\061\037\062\036\063\045\064\uffe7" +
    "\065\uffe7\115\035\001\002\000\046\004\uffc7\005\uffc7\006" +
    "\uffc7\007\uffc7\010\uffc7\012\uffc7\014\uffc7\041\uffc7\042\uffc7" +
    "\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051" +
    "\uffc7\060\uffc7\066\uffc7\001\002\000\046\004\uffb8\005\uffb8" +
    "\006\077\007\074\010\062\012\uffb8\014\uffb8\041\uffb8\042" +
    "\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8" +
    "\051\uffb8\060\075\066\uffb8\001\002\000\046\004\100\005" +
    "\067\006\077\007\074\010\062\012\uffb9\014\uffb9\041\101" +
    "\042\065\043\073\044\064\045\071\046\076\047\uffb9\050" +
    "\uffb9\051\uffb9\060\075\066\uffb9\001\002\000\046\004\uffc4" +
    "\005\uffc4\006\uffc4\007\uffc4\010\uffc4\012\uffc4\014\uffc4\041" +
    "\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4" +
    "\050\uffc4\051\uffc4\060\uffc4\066\uffc4\001\002\000\046\004" +
    "\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\012\uffc3\014\uffc3" +
    "\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047" +
    "\uffc3\050\uffc3\051\uffc3\060\uffc3\066\uffc3\001\002\000\042" +
    "\004\100\005\067\006\077\007\074\010\062\012\150\041" +
    "\101\042\065\043\073\044\064\045\071\046\076\047\066" +
    "\050\070\051\072\060\075\001\002\000\046\004\uffb7\005" +
    "\uffb7\006\uffb7\007\uffb7\010\uffb7\012\uffb7\014\uffb7\041\uffb7" +
    "\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050" +
    "\uffb7\051\uffb7\060\uffb7\066\uffb7\001\002\000\004\002\001" +
    "\001\002\000\026\005\053\011\047\027\056\030\057\031" +
    "\054\032\060\033\052\034\055\035\050\052\051\001\002" +
    "\000\042\004\100\005\067\006\077\007\074\010\062\012" +
    "\154\041\101\042\065\043\073\044\064\045\071\046\076" +
    "\047\066\050\070\051\072\060\075\001\002\000\004\014" +
    "\uffd3\001\002\000\016\017\005\020\011\021\016\022\041" +
    "\023\014\035\156\001\002\000\004\013\174\001\002\000" +
    "\004\014\uffea\001\002\000\004\014\uffeb\001\002\000\004" +
    "\014\162\001\002\000\026\005\053\011\047\027\056\030" +
    "\057\031\054\032\060\033\052\034\055\035\050\052\051" +
    "\001\002\000\042\004\100\005\067\006\077\007\074\010" +
    "\062\014\164\041\101\042\065\043\073\044\064\045\071" +
    "\046\076\047\066\050\070\051\072\060\075\001\002\000" +
    "\026\005\053\011\047\027\056\030\057\031\054\032\060" +
    "\033\052\034\055\035\050\052\051\001\002\000\042\004" +
    "\100\005\067\006\077\007\074\010\062\012\166\041\101" +
    "\042\065\043\073\044\064\045\071\046\076\047\066\050" +
    "\070\051\072\060\075\001\002\000\004\015\170\001\002" +
    "\000\052\002\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022" +
    "\uffec\023\uffec\035\uffec\036\uffec\037\uffec\053\uffec\055\uffec" +
    "\056\uffec\057\uffec\061\uffec\062\uffec\063\uffec\064\uffec\065" +
    "\uffec\115\uffec\001\002\000\044\016\172\017\005\020\011" +
    "\021\016\022\041\023\014\035\031\036\043\037\013\053" +
    "\032\055\030\056\007\057\040\061\037\062\036\063\045" +
    "\115\035\001\002\000\044\016\173\017\005\020\011\021" +
    "\016\022\041\023\014\035\031\036\043\037\013\053\032" +
    "\055\030\056\007\057\040\061\037\062\036\063\045\115" +
    "\035\001\002\000\054\002\uffdd\016\uffdd\017\uffdd\020\uffdd" +
    "\021\uffdd\022\uffdd\023\uffdd\035\uffdd\036\uffdd\037\uffdd\053" +
    "\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\061\uffdd\062\uffdd" +
    "\063\uffdd\064\uffdd\065\uffdd\115\uffdd\001\002\000\054\002" +
    "\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\053\uffdc\054\uffdc\055\uffdc\056" +
    "\uffdc\057\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc" +
    "\115\uffdc\001\002\000\026\005\053\011\047\027\056\030" +
    "\057\031\054\032\060\033\052\034\055\035\050\052\051" +
    "\001\002\000\042\004\100\005\067\006\077\007\074\010" +
    "\062\014\uffd9\041\101\042\065\043\073\044\064\045\071" +
    "\046\076\047\066\050\070\051\072\060\075\001\002\000" +
    "\004\055\177\001\002\000\004\011\200\001\002\000\026" +
    "\005\053\011\047\027\056\030\057\031\054\032\060\033" +
    "\052\034\055\035\050\052\051\001\002\000\042\004\100" +
    "\005\067\006\077\007\074\010\062\012\202\041\101\042" +
    "\065\043\073\044\064\045\071\046\076\047\066\050\070" +
    "\051\072\060\075\001\002\000\004\014\uffed\001\002\000" +
    "\004\014\ufff0\001\002\000\052\002\ufffa\016\ufffa\017\ufffa" +
    "\020\ufffa\021\ufffa\022\ufffa\023\ufffa\035\ufffa\036\ufffa\037" +
    "\ufffa\053\ufffa\055\ufffa\056\ufffa\057\ufffa\061\ufffa\062\ufffa" +
    "\063\ufffa\064\ufffa\065\ufffa\115\ufffa\001\002\000\026\005" +
    "\053\011\047\027\056\030\057\031\054\032\060\033\052" +
    "\034\055\035\050\052\051\001\002\000\042\004\100\005" +
    "\067\006\077\007\074\010\062\012\207\041\101\042\065" +
    "\043\073\044\064\045\071\046\076\047\066\050\070\051" +
    "\072\060\075\001\002\000\004\015\170\001\002\000\054" +
    "\002\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023" +
    "\uffde\035\uffde\036\uffde\037\uffde\053\uffde\054\uffde\055\uffde" +
    "\056\uffde\057\uffde\061\uffde\062\uffde\063\uffde\064\uffde\065" +
    "\uffde\115\uffde\001\002\000\004\014\214\001\002\000\004" +
    "\014\213\001\002\000\052\002\uffee\016\uffee\017\uffee\020" +
    "\uffee\021\uffee\022\uffee\023\uffee\035\uffee\036\uffee\037\uffee" +
    "\053\uffee\055\uffee\056\uffee\057\uffee\061\uffee\062\uffee\063" +
    "\uffee\064\uffee\065\uffee\115\uffee\001\002\000\052\002\uffef" +
    "\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\035" +
    "\uffef\036\uffef\037\uffef\053\uffef\055\uffef\056\uffef\057\uffef" +
    "\061\uffef\062\uffef\063\uffef\064\uffef\065\uffef\115\uffef\001" +
    "\002\000\026\005\053\011\047\027\056\030\057\031\054" +
    "\032\060\033\052\034\055\035\050\052\051\001\002\000" +
    "\042\004\100\005\067\006\077\007\074\010\062\012\217" +
    "\041\101\042\065\043\073\044\064\045\071\046\076\047" +
    "\066\050\070\051\072\060\075\001\002\000\004\015\170" +
    "\001\002\000\052\002\uffe2\016\uffe2\017\uffe2\020\uffe2\021" +
    "\uffe2\022\uffe2\023\uffe2\035\uffe2\036\uffe2\037\uffe2\053\uffe2" +
    "\055\uffe2\056\uffe2\057\uffe2\061\uffe2\062\uffe2\063\uffe2\064" +
    "\uffe2\065\uffe2\115\uffe2\001\002\000\052\002\ufffc\016\ufffc" +
    "\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\035\ufffc\036" +
    "\ufffc\037\ufffc\053\ufffc\055\ufffc\056\ufffc\057\ufffc\061\ufffc" +
    "\062\ufffc\063\ufffc\064\ufffc\065\ufffc\115\ufffc\001\002\000" +
    "\052\002\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4" +
    "\023\ufff4\035\ufff4\036\ufff4\037\ufff4\053\ufff4\055\ufff4\056" +
    "\ufff4\057\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4" +
    "\115\ufff4\001\002\000\052\002\ufffb\016\ufffb\017\ufffb\020" +
    "\ufffb\021\ufffb\022\ufffb\023\ufffb\035\ufffb\036\ufffb\037\ufffb" +
    "\053\ufffb\055\ufffb\056\ufffb\057\ufffb\061\ufffb\062\ufffb\063" +
    "\ufffb\064\ufffb\065\ufffb\115\ufffb\001\002\000\052\002\ufffd" +
    "\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\035" +
    "\ufffd\036\ufffd\037\ufffd\053\ufffd\055\ufffd\056\ufffd\057\ufffd" +
    "\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\115\ufffd\001" +
    "\002\000\006\015\170\053\226\001\002\000\004\011\230" +
    "\001\002\000\052\002\uffe1\016\uffe1\017\uffe1\020\uffe1\021" +
    "\uffe1\022\uffe1\023\uffe1\035\uffe1\036\uffe1\037\uffe1\053\uffe1" +
    "\055\uffe1\056\uffe1\057\uffe1\061\uffe1\062\uffe1\063\uffe1\064" +
    "\uffe1\065\uffe1\115\uffe1\001\002\000\026\005\053\011\047" +
    "\027\056\030\057\031\054\032\060\033\052\034\055\035" +
    "\050\052\051\001\002\000\042\004\100\005\067\006\077" +
    "\007\074\010\062\012\232\041\101\042\065\043\073\044" +
    "\064\045\071\046\076\047\066\050\070\051\072\060\075" +
    "\001\002\000\004\015\170\001\002\000\054\002\uffdf\016" +
    "\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf\035\uffdf" +
    "\036\uffdf\037\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057" +
    "\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\115\uffdf" +
    "\001\002\000\006\013\235\014\uffda\001\002\000\026\005" +
    "\053\011\047\027\056\030\057\031\054\032\060\033\052" +
    "\034\055\035\050\052\051\001\002\000\042\004\100\005" +
    "\067\006\077\007\074\010\062\014\uffdb\041\101\042\065" +
    "\043\073\044\064\045\071\046\076\047\066\050\070\051" +
    "\072\060\075\001\002\000\026\005\053\011\047\027\056" +
    "\030\057\031\054\032\060\033\052\034\055\035\050\052" +
    "\051\001\002\000\042\004\100\005\067\006\077\007\074" +
    "\010\062\012\241\041\101\042\065\043\073\044\064\045" +
    "\071\046\076\047\066\050\070\051\072\060\075\001\002" +
    "\000\004\014\uffd2\001\002\000\052\002\ufff9\016\ufff9\017" +
    "\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\035\ufff9\036\ufff9" +
    "\037\ufff9\053\ufff9\055\ufff9\056\ufff9\057\ufff9\061\ufff9\062" +
    "\ufff9\063\ufff9\064\ufff9\065\ufff9\115\ufff9\001\002\000\052" +
    "\002\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023" +
    "\ufff1\035\ufff1\036\ufff1\037\ufff1\053\ufff1\055\ufff1\056\ufff1" +
    "\057\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\115" +
    "\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\046\002\043\003\041\004\005\005\017\006" +
    "\026\007\021\010\032\011\007\012\023\013\033\014\022" +
    "\015\011\017\025\020\020\021\024\022\003\024\014\025" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\004\126\005" +
    "\017\006\026\007\021\010\032\011\007\012\023\013\033" +
    "\014\022\015\011\017\025\020\020\021\024\022\003\024" +
    "\014\025\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\060\001\001\000\004\023" +
    "\146\001\001\000\002\001\001\000\004\023\143\001\001" +
    "\000\002\001\001\000\004\023\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\141\001" +
    "\001\000\002\001\001\000\004\023\116\001\001\000\004" +
    "\023\115\001\001\000\004\023\114\001\001\000\004\023" +
    "\113\001\001\000\004\023\112\001\001\000\004\023\111" +
    "\001\001\000\004\023\110\001\001\000\004\023\107\001" +
    "\001\000\004\023\106\001\001\000\004\023\105\001\001" +
    "\000\004\023\104\001\001\000\004\023\103\001\001\000" +
    "\004\023\102\001\001\000\004\023\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\123\001\001\000\002\001\001" +
    "\000\044\003\125\004\005\005\017\006\026\007\021\010" +
    "\032\011\007\012\023\013\033\014\022\015\011\017\025" +
    "\020\020\021\024\022\003\024\014\025\016\001\001\000" +
    "\042\004\126\005\017\006\026\007\021\010\032\011\007" +
    "\012\023\013\033\014\022\015\011\017\025\020\020\021" +
    "\024\022\003\024\014\025\016\001\001\000\002\001\001" +
    "\000\044\003\130\004\005\005\017\006\026\007\021\010" +
    "\032\011\007\012\023\013\033\014\022\015\011\017\025" +
    "\020\020\021\024\022\003\024\014\025\016\001\001\000" +
    "\042\004\126\005\017\006\026\007\021\010\032\011\007" +
    "\012\023\013\033\014\022\015\011\017\025\020\020\021" +
    "\024\022\003\024\014\025\016\001\001\000\002\001\001" +
    "\000\004\023\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\003\136\004\005\005\017\006\026\007\021" +
    "\010\032\011\007\012\023\013\033\014\022\015\011\017" +
    "\025\020\020\021\024\022\003\024\014\025\016\001\001" +
    "\000\042\004\126\005\017\006\026\007\021\010\032\011" +
    "\007\012\023\013\033\014\022\015\011\017\025\020\020" +
    "\021\024\022\003\024\014\025\016\001\001\000\044\003" +
    "\140\004\005\005\017\006\026\007\021\010\032\011\007" +
    "\012\023\013\033\014\022\015\011\017\025\020\020\021" +
    "\024\022\003\024\014\025\016\001\001\000\042\004\126" +
    "\005\017\006\026\007\021\010\032\011\007\012\023\013" +
    "\033\014\022\015\011\017\025\020\020\021\024\022\003" +
    "\024\014\025\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\156\006\157\016\160\024\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\162\001\001\000\002\001\001\000" +
    "\004\023\164\001\001\000\002\001\001\000\004\027\166" +
    "\001\001\000\002\001\001\000\044\003\170\004\005\005" +
    "\017\006\026\007\021\010\032\011\007\012\023\013\033" +
    "\014\022\015\011\017\025\020\020\021\024\022\003\024" +
    "\014\025\016\001\001\000\042\004\126\005\017\006\026" +
    "\007\021\010\032\011\007\012\023\013\033\014\022\015" +
    "\011\017\025\020\020\021\024\022\003\024\014\025\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\205\001\001\000\002\001\001\000\004\027\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\215\001" +
    "\001\000\002\001\001\000\004\027\217\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\230\001\001\000" +
    "\002\001\001\000\004\027\232\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\235\001\001\000\002\001" +
    "\001\000\004\023\237\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


   

    /* Variable que guarda el árbol de sintáxis abstracta generado luego del análisis sintáctico */
    public AST AST;
    
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
            Errores errrores = new Errores(Errores.enumTipoError.sintactico , "Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
    //Interfaz.lista_errores.add(new CError("Sintáctico", "No se esperaba este componente '" + s.value + "'", s.left, s.right));
    
    } 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= L_INSTRUCCIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    //se guarda el AST, que es la lista principal de instrucciones en la variable
    //AST que se definió dentro del parser
    
        parser.AST = new AST(a);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // L_INSTRUCCIONES ::= L_INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // L_INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DECLARACION puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= ASIGNACION puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= IMPRIMIR puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= BREAK puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= CONTINUE puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= SENTENCIA_IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= SENTENCIA_WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= SENTENCIA_SWITCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= SENTENCIA_FOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= SENTENCIA_DO puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= SENTENCIA_INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= SENTENCIA_DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= SENTENCIA_IMPORT puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA_IMPORT ::= rimport cadena 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Import (a , aleft , aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IMPORT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA_INCREMENTO ::= id masmas puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new InsIncremento( a, aleft, aright) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_INCREMENTO",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA_DECREMENTO ::= id menosmenos puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new InsDecremento( a, aleft, aright) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DECREMENTO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA_DO ::= rdo BLOQUE rwhile parizquierdo E parderecho 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Bloque a = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Do (b,a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA_FOR ::= rfor parizquierdo ASIGNACION_DECLARACION puntoycoma E puntoycoma E parderecho BLOQUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque d = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new For(a,b,c,d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIGNACION_DECLARACION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_DECLARACION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIGNACION_DECLARACION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_DECLARACION",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA_SWITCH ::= rswitch parizquierdo E parderecho llaveizq L_CASOS llaveder 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CondicionSwitch> b = (LinkedList<CondicionSwitch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =new Switch(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // L_CASOS ::= L_CASOS rcase E dospuntos L_INSTRUCCIONES 
            {
              LinkedList<CondicionSwitch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<CondicionSwitch> a = (LinkedList<CondicionSwitch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.add(new CondicionSwitch(b,c)) ; RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CASOS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // L_CASOS ::= L_CASOS rdefault dospuntos L_INSTRUCCIONES 
            {
              LinkedList<CondicionSwitch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<CondicionSwitch> a = (LinkedList<CondicionSwitch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.add(new CondicionSwitch(c)) ;RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CASOS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // L_CASOS ::= rcase E dospuntos L_INSTRUCCIONES 
            {
              LinkedList<CondicionSwitch> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(new CondicionSwitch(b,c));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CASOS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // L_CASOS ::= rdefault dospuntos L_INSTRUCCIONES 
            {
              LinkedList<CondicionSwitch> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(new CondicionSwitch(c));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CASOS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // BREAK ::= rbreak 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Break(aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAK",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTINUE ::= rcontinue 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Continue(aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA_WHILE ::= rwhile parizquierdo E parderecho BLOQUE 
            {
              Instruccion RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While (a, b,zleft, zright) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA_IF ::= L_IF relse BLOQUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<CondicionIf> a = (LinkedList<CondicionIf>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque c = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new If (a,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA_IF ::= L_IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<CondicionIf> a = (LinkedList<CondicionIf>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If (a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // L_IF ::= L_IF relse rif parizquierdo E parderecho BLOQUE 
            {
              LinkedList<CondicionIf> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<CondicionIf> a = (LinkedList<CondicionIf>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque c = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.add(new CondicionIf (b, c, bleft, bright)); RESULT = a ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_IF",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // L_IF ::= rif parizquierdo E parderecho BLOQUE 
            {
              LinkedList<CondicionIf> RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(new CondicionIf (a, b, aleft , aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_IF",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BLOQUE ::= llaveizq llaveder 
            {
              Bloque RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Bloque(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BLOQUE ::= llaveizq L_INSTRUCCIONES llaveder 
            {
              Bloque RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Bloque(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION ::= T id igual E 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(a, b, c, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION ::= T id 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(a, b, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASIGNACION ::= id igual E 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Asignacion(a,aleft,aright ,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // T ::= rint 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Tipo(Tipo.EnumTipo.entero); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // T ::= rchar 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipo.EnumTipo.caracter); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // T ::= rboolean 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipo.EnumTipo.booleano); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // T ::= rdouble 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipo.EnumTipo.doble); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // T ::= rstring 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipo.EnumTipo.cadena); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IMPRIMIR ::= rprintln parizquierdo E parderecho 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Imprimir(a,true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IMPRIMIR ::= rprint parizquierdo E parderecho 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Imprimir(a,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E ::= entero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.EnumTipo.entero), a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E ::= caracter 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.EnumTipo.caracter), a.replace("\'","")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E ::= rtrue 
            {
              Expresion RESULT =null;
		 RESULT = new Literal(new Tipo(Tipo.EnumTipo.booleano), true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E ::= rfalse 
            {
              Expresion RESULT =null;
		 RESULT = new Literal(new Tipo(Tipo.EnumTipo.booleano), false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E ::= doble 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.EnumTipo.doble), a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E ::= cadena 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.EnumTipo.cadena), a.replace("\"","")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E ::= E mas E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Suma(aleft, aright, a, c) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E ::= E menos E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Resta (a,c, aleft, aright) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E ::= E por E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiplicacion(a,c, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E ::= E division E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Division(a,c,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E ::= E potencia E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Potencia(a,c,aleft,aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E ::= E modulo E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT  = new Modulo(a,c,aleft,aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E ::= id 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Id(a, aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E ::= id masmas 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExpIncremento ( a, aleft,aright) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E ::= id menosmenos 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExpDecremento( a, aleft,aright) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E ::= E mayorque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Mayor(a,c,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E ::= E menorque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Menor(a,c,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E ::= E mayorigualque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MayorIgual(a,c,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E ::= E menorigualque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MenorIgual(a,c,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E ::= E igualigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Igual(a,c,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E ::= E diferenteque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Diferente(a,c,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E ::= E or E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new O(a,c,aleft,aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E ::= E and E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Y(a,c,aleft,aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E ::= E xor E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Xor(a,c,aleft,aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E ::= not E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =new Not(b, aleft,aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E ::= menos E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Negativo (a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E ::= parizquierdo E parderecho 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
