
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import arbol.*;
import arbol.expresiones.*;
import arbol.expresiones.aritmeticos.*;
import arbol.expresiones.relacionales.*;
import arbol.expresiones.logicas.*;
import arbol.instrucciones.*;
import arbol.instrucciones.sentencias.*;
import arbol.entorno.*;
import interfaz.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\004\000\002\005\003\000\002\005" +
    "\003\000\002\005\004\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\033\011\000\002" +
    "\006\003\000\002\006\004\000\002\006\004\000\002\025" +
    "\010\000\002\025\007\000\002\025\007\000\002\025\006" +
    "\000\002\007\006\000\002\007\004\000\002\010\005\000" +
    "\002\004\004\000\002\004\003\000\002\050\004\000\002" +
    "\050\005\000\002\030\005\000\002\026\007\000\002\026" +
    "\006\000\002\043\005\000\002\043\003\000\002\042\005" +
    "\000\002\042\003\000\002\031\006\000\002\027\004\000" +
    "\002\027\005\000\002\011\006\000\002\011\006\000\002" +
    "\012\003\000\002\013\003\000\002\024\004\000\002\022" +
    "\005\000\002\023\005\000\002\021\010\000\002\017\013" +
    "\000\002\020\003\000\002\020\003\000\002\016\011\000" +
    "\002\041\007\000\002\041\006\000\002\041\006\000\002" +
    "\041\005\000\002\015\007\000\002\014\005\000\002\014" +
    "\003\000\002\040\011\000\002\040\007\000\002\047\004" +
    "\000\002\047\005\000\002\044\005\000\002\044\003\000" +
    "\002\053\003\000\002\053\004\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\037\004" +
    "\000\002\037\003\000\002\051\004\000\002\051\005\000" +
    "\002\051\005\000\002\052\005\000\002\052\003\000\002" +
    "\045\005\000\002\045\004\000\002\046\006\000\002\046" +
    "\005\000\002\035\003\000\002\035\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\004\000\002\034\004\000\002\034\006\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\004" +
    "\000\002\034\004\000\002\034\005\000\002\034\005\000" +
    "\002\034\007\000\002\034\006\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010b\000\054\017\033\020\056\021\035\022\057\023" +
    "\034\024\011\026\010\035\050\036\041\037\051\041\063" +
    "\054\025\056\031\057\022\060\052\062\036\063\064\064" +
    "\021\074\017\115\023\124\042\001\002\000\064\004\uffb8" +
    "\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013" +
    "\uffb8\014\uffb8\016\uffb8\025\uffb8\042\uffb8\043\uffb8\044\uffb8" +
    "\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\061" +
    "\uffb8\067\uffb8\071\uffb8\072\uffb8\113\uffb8\001\002\000\056" +
    "\002\000\017\033\020\056\021\035\022\057\023\034\024" +
    "\011\026\010\035\050\036\041\037\051\041\063\054\025" +
    "\056\031\057\022\060\052\062\036\063\064\064\021\074" +
    "\017\115\023\124\042\001\002\000\004\035\u0107\001\002" +
    "\000\064\002\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022" +
    "\ufff2\023\ufff2\024\ufff2\026\ufff2\035\ufff2\036\ufff2\037\ufff2" +
    "\041\ufff2\054\ufff2\056\ufff2\057\ufff2\060\ufff2\062\ufff2\063" +
    "\ufff2\064\ufff2\065\ufff2\066\ufff2\074\ufff2\115\ufff2\124\ufff2" +
    "\001\002\000\010\011\uffb0\035\uffb0\075\uffb0\001\002\000" +
    "\004\035\367\001\002\000\006\035\uffad\075\363\001\002" +
    "\000\004\014\361\001\002\000\064\002\ufff8\016\ufff8\017" +
    "\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\026\ufff8" +
    "\035\ufff8\036\ufff8\037\ufff8\041\ufff8\054\ufff8\056\ufff8\057" +
    "\ufff8\060\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8" +
    "\074\ufff8\115\ufff8\124\ufff8\001\002\000\064\002\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0" +
    "\026\ufff0\035\ufff0\036\ufff0\037\ufff0\041\ufff0\054\ufff0\056" +
    "\ufff0\057\ufff0\060\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0" +
    "\066\ufff0\074\ufff0\115\ufff0\124\ufff0\001\002\000\004\014" +
    "\360\001\002\000\034\005\101\011\075\014\355\027\105" +
    "\030\107\031\102\032\110\033\100\034\103\035\076\053" +
    "\077\077\111\114\104\001\002\000\064\002\ufffe\016\ufffe" +
    "\017\ufffe\020\ufffe\021\ufffe\022\ufffe\023\ufffe\024\ufffe\026" +
    "\ufffe\035\ufffe\036\ufffe\037\ufffe\041\ufffe\054\ufffe\056\ufffe" +
    "\057\ufffe\060\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe\066" +
    "\ufffe\074\ufffe\115\ufffe\124\ufffe\001\002\000\004\011\331" +
    "\001\002\000\004\014\uffce\001\002\000\004\033\330\001" +
    "\002\000\064\002\uffec\016\uffec\017\uffec\020\uffec\021\uffec" +
    "\022\uffec\023\uffec\024\uffec\026\uffec\035\uffec\036\uffec\037" +
    "\uffec\041\uffec\054\uffec\056\uffec\057\uffec\060\uffec\062\uffec" +
    "\063\uffec\064\uffec\065\uffec\066\uffec\074\uffec\115\uffec\124" +
    "\uffec\001\002\000\004\011\324\001\002\000\014\011\303" +
    "\013\257\071\304\072\305\113\173\001\002\000\064\002" +
    "\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed" +
    "\024\uffed\026\uffed\035\uffed\036\uffed\037\uffed\041\uffed\054" +
    "\uffed\056\uffed\057\uffed\060\uffed\062\uffed\063\uffed\064\uffed" +
    "\065\uffed\066\uffed\074\uffed\115\uffed\124\uffed\001\002\000" +
    "\064\002\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee" +
    "\023\uffee\024\uffee\026\uffee\035\uffee\036\uffee\037\uffee\041" +
    "\uffee\054\uffee\056\uffee\057\uffee\060\uffee\062\uffee\063\uffee" +
    "\064\uffee\065\uffee\066\uffee\074\uffee\115\uffee\124\uffee\001" +
    "\002\000\004\011\277\001\002\000\064\002\uffeb\016\uffeb" +
    "\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\026" +
    "\uffeb\035\uffeb\036\uffeb\037\uffeb\041\uffeb\054\uffeb\056\uffeb" +
    "\057\uffeb\060\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066" +
    "\uffeb\074\uffeb\115\uffeb\124\uffeb\001\002\000\010\011\uffb5" +
    "\035\uffb5\075\uffb5\001\002\000\010\011\uffb1\035\uffb1\075" +
    "\uffb1\001\002\000\010\011\uffb4\035\uffb4\075\uffb4\001\002" +
    "\000\004\011\243\001\002\000\064\002\ufff7\016\ufff7\017" +
    "\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\026\ufff7" +
    "\035\ufff7\036\ufff7\037\ufff7\041\ufff7\054\ufff7\056\ufff7\057" +
    "\ufff7\060\ufff7\062\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7" +
    "\074\ufff7\115\ufff7\124\ufff7\001\002\000\004\014\242\001" +
    "\002\000\004\011\237\001\002\000\004\011\234\001\002" +
    "\000\066\002\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\026\uffbe\035\uffbe\036\uffbe\037\uffbe" +
    "\041\uffbe\054\uffbe\055\225\056\uffbe\057\uffbe\060\uffbe\062" +
    "\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\074\uffbe\115\uffbe" +
    "\124\uffbe\001\002\000\004\014\224\001\002\000\064\002" +
    "\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5" +
    "\024\ufff5\026\ufff5\035\ufff5\036\ufff5\037\ufff5\041\ufff5\054" +
    "\ufff5\056\ufff5\057\ufff5\060\ufff5\062\ufff5\063\ufff5\064\ufff5" +
    "\065\ufff5\066\ufff5\074\ufff5\115\ufff5\124\ufff5\001\002\000" +
    "\004\014\223\001\002\000\004\014\222\001\002\000\062" +
    "\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012" +
    "\uffb7\013\uffb7\025\uffb7\035\uffaf\042\uffb7\043\uffb7\044\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\061" +
    "\uffb7\071\uffb7\072\uffb7\075\155\113\uffb7\001\002\000\004" +
    "\011\217\001\002\000\004\014\uffcd\001\002\000\064\002" +
    "\uffef\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef" +
    "\024\uffef\026\uffef\035\uffef\036\uffef\037\uffef\041\uffef\054" +
    "\uffef\056\uffef\057\uffef\060\uffef\062\uffef\063\uffef\064\uffef" +
    "\065\uffef\066\uffef\074\uffef\115\uffef\124\uffef\001\002\000" +
    "\064\002\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea" +
    "\023\uffea\024\uffea\026\uffea\035\uffea\036\uffea\037\uffea\041" +
    "\uffea\054\uffea\056\uffea\057\uffea\060\uffea\062\uffea\063\uffea" +
    "\064\uffea\065\uffea\066\uffea\074\uffea\115\uffea\124\uffea\001" +
    "\002\000\004\002\216\001\002\000\010\011\uffb2\035\uffb2" +
    "\075\uffb2\001\002\000\010\011\uffb3\035\uffb3\075\uffb3\001" +
    "\002\000\064\002\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\026\ufff3\035\ufff3\036\ufff3\037" +
    "\ufff3\041\ufff3\054\ufff3\056\ufff3\057\ufff3\060\ufff3\062\ufff3" +
    "\063\ufff3\064\ufff3\065\ufff3\066\ufff3\074\ufff3\115\ufff3\124" +
    "\ufff3\001\002\000\064\002\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\021\ufff6\022\ufff6\023\ufff6\024\ufff6\026\ufff6\035\ufff6\036" +
    "\ufff6\037\ufff6\041\ufff6\054\ufff6\056\ufff6\057\ufff6\060\ufff6" +
    "\062\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\074\ufff6\115" +
    "\ufff6\124\ufff6\001\002\000\004\014\215\001\002\000\004" +
    "\011\207\001\002\000\004\015\066\001\002\000\004\056" +
    "\073\001\002\000\056\016\070\017\033\020\056\021\035" +
    "\022\057\023\034\024\011\026\010\035\050\036\041\037" +
    "\051\041\063\054\025\056\031\057\022\060\052\062\036" +
    "\063\064\064\021\074\017\115\023\124\042\001\002\000" +
    "\056\016\071\017\033\020\056\021\035\022\057\023\034" +
    "\024\011\026\010\035\050\036\041\037\051\041\063\054" +
    "\025\056\031\057\022\060\052\062\036\063\064\064\021" +
    "\074\017\115\023\124\042\001\002\000\066\002\uffbb\016" +
    "\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb" +
    "\026\uffbb\035\uffbb\036\uffbb\037\uffbb\041\uffbb\054\uffbb\055" +
    "\uffbb\056\uffbb\057\uffbb\060\uffbb\062\uffbb\063\uffbb\064\uffbb" +
    "\065\uffbb\066\uffbb\074\uffbb\115\uffbb\124\uffbb\001\002\000" +
    "\066\002\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba" +
    "\023\uffba\024\uffba\026\uffba\035\uffba\036\uffba\037\uffba\041" +
    "\uffba\054\uffba\055\uffba\056\uffba\057\uffba\060\uffba\062\uffba" +
    "\063\uffba\064\uffba\065\uffba\066\uffba\074\uffba\115\uffba\124" +
    "\uffba\001\002\000\064\002\uffff\016\uffff\017\uffff\020\uffff" +
    "\021\uffff\022\uffff\023\uffff\024\uffff\026\uffff\035\uffff\036" +
    "\uffff\037\uffff\041\uffff\054\uffff\056\uffff\057\uffff\060\uffff" +
    "\062\uffff\063\uffff\064\uffff\065\uffff\066\uffff\074\uffff\115" +
    "\uffff\124\uffff\001\002\000\004\011\074\001\002\000\032" +
    "\005\101\011\075\027\105\030\107\031\102\032\110\033" +
    "\100\034\103\035\076\053\077\077\111\114\104\001\002" +
    "\000\032\005\101\011\075\027\105\030\107\031\102\032" +
    "\110\033\100\034\103\035\076\053\077\077\111\114\104" +
    "\001\002\000\066\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010" +
    "\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\016\uffb7\025\uffb7" +
    "\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050" +
    "\uffb7\051\uffb7\052\uffb7\061\uffb7\067\uffb7\071\uffb7\072\uffb7" +
    "\075\155\113\uffb7\001\002\000\032\005\101\011\075\027" +
    "\105\030\107\031\102\032\110\033\100\034\103\035\076" +
    "\053\077\077\111\114\104\001\002\000\052\004\uff9c\005" +
    "\uff9c\006\uff9c\007\uff9c\010\uff9c\012\uff9c\014\uff9c\016\uff9c" +
    "\025\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047" +
    "\uff9c\050\uff9c\051\uff9c\052\uff9c\061\uff9c\067\uff9c\001\002" +
    "\000\032\005\101\011\075\027\105\030\107\031\102\032" +
    "\110\033\100\034\103\035\076\053\077\077\111\114\104" +
    "\001\002\000\052\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010" +
    "\uff9f\012\uff9f\014\uff9f\016\uff9f\025\uff9f\042\uff9f\043\uff9f" +
    "\044\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052" +
    "\uff9f\061\uff9f\067\uff9f\001\002\000\052\004\uffa0\005\uffa0" +
    "\006\uffa0\007\uffa0\010\uffa0\012\uffa0\014\uffa0\016\uffa0\025" +
    "\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0" +
    "\050\uffa0\051\uffa0\052\uffa0\061\uffa0\067\uffa0\001\002\000" +
    "\052\004\uff81\005\uff81\006\uff81\007\uff81\010\uff81\012\uff81" +
    "\014\uff81\016\uff81\025\uff81\042\uff81\043\uff81\044\uff81\045" +
    "\uff81\046\uff81\047\uff81\050\uff81\051\uff81\052\uff81\061\uff81" +
    "\067\uff81\001\002\000\052\004\uffa1\005\uffa1\006\uffa1\007" +
    "\uffa1\010\uffa1\012\uffa1\014\uffa1\016\uffa1\025\uffa1\042\uffa1" +
    "\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051" +
    "\uffa1\052\uffa1\061\uffa1\067\uffa1\001\002\000\062\004\uff9b" +
    "\005\uff9b\006\uff9b\007\uff9b\010\uff9b\011\172\012\uff9b\014" +
    "\uff9b\016\uff9b\025\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b" +
    "\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\061\uff9b\067" +
    "\uff9b\071\174\072\175\113\173\001\002\000\052\004\uff9d" +
    "\005\uff9d\006\uff9d\007\uff9d\010\uff9d\012\uff9d\014\uff9d\016" +
    "\uff9d\025\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d" +
    "\047\uff9d\050\uff9d\051\uff9d\052\uff9d\061\uff9d\067\uff9d\001" +
    "\002\000\052\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e" +
    "\012\uff9e\014\uff9e\016\uff9e\025\uff9e\042\uff9e\043\uff9e\044" +
    "\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e" +
    "\061\uff9e\067\uff9e\001\002\000\020\017\033\020\056\021" +
    "\035\022\057\023\034\026\010\035\153\001\002\000\042" +
    "\004\131\005\121\006\130\007\124\010\114\012\115\042" +
    "\132\043\116\044\125\045\113\046\123\047\127\050\117" +
    "\051\120\052\122\061\126\001\002\000\032\005\101\011" +
    "\075\027\105\030\107\031\102\032\110\033\100\034\103" +
    "\035\076\053\077\077\111\114\104\001\002\000\032\005" +
    "\101\011\075\027\105\030\107\031\102\032\110\033\100" +
    "\034\103\035\076\053\077\077\111\114\104\001\002\000" +
    "\004\014\uffc9\001\002\000\032\005\101\011\075\027\105" +
    "\030\107\031\102\032\110\033\100\034\103\035\076\053" +
    "\077\077\111\114\104\001\002\000\032\005\101\011\075" +
    "\027\105\030\107\031\102\032\110\033\100\034\103\035" +
    "\076\053\077\077\111\114\104\001\002\000\032\005\101" +
    "\011\075\027\105\030\107\031\102\032\110\033\100\034" +
    "\103\035\076\053\077\077\111\114\104\001\002\000\032" +
    "\005\101\011\075\027\105\030\107\031\102\032\110\033" +
    "\100\034\103\035\076\053\077\077\111\114\104\001\002" +
    "\000\032\005\101\011\075\027\105\030\107\031\102\032" +
    "\110\033\100\034\103\035\076\053\077\077\111\114\104" +
    "\001\002\000\032\005\101\011\075\027\105\030\107\031" +
    "\102\032\110\033\100\034\103\035\076\053\077\077\111" +
    "\114\104\001\002\000\032\005\101\011\075\027\105\030" +
    "\107\031\102\032\110\033\100\034\103\035\076\053\077" +
    "\077\111\114\104\001\002\000\032\005\101\011\075\027" +
    "\105\030\107\031\102\032\110\033\100\034\103\035\076" +
    "\053\077\077\111\114\104\001\002\000\032\005\101\011" +
    "\075\027\105\030\107\031\102\032\110\033\100\034\103" +
    "\035\076\053\077\077\111\114\104\001\002\000\032\005" +
    "\101\011\075\027\105\030\107\031\102\032\110\033\100" +
    "\034\103\035\076\053\077\077\111\114\104\001\002\000" +
    "\032\005\101\011\075\027\105\030\107\031\102\032\110" +
    "\033\100\034\103\035\076\053\077\077\111\114\104\001" +
    "\002\000\032\005\101\011\075\027\105\030\107\031\102" +
    "\032\110\033\100\034\103\035\076\053\077\077\111\114" +
    "\104\001\002\000\032\005\101\011\075\027\105\030\107" +
    "\031\102\032\110\033\100\034\103\035\076\053\077\077" +
    "\111\114\104\001\002\000\052\004\131\005\121\006\130" +
    "\007\124\010\114\012\uff8f\014\uff8f\016\uff8f\025\uff8f\042" +
    "\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f" +
    "\051\uff8f\052\uff8f\061\126\067\uff8f\001\002\000\052\004" +
    "\uff96\005\uff96\006\130\007\124\010\114\012\uff96\014\uff96" +
    "\016\uff96\025\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046" +
    "\uff96\047\uff96\050\uff96\051\uff96\052\uff96\061\126\067\uff96" +
    "\001\002\000\052\004\uff94\005\uff94\006\uff94\007\uff94\010" +
    "\114\012\uff94\014\uff94\016\uff94\025\uff94\042\uff94\043\uff94" +
    "\044\uff94\045\uff94\046\uff94\047\uff94\050\uff94\051\uff94\052" +
    "\uff94\061\uff94\067\uff94\001\002\000\052\004\131\005\121" +
    "\006\130\007\124\010\114\012\uff8b\014\uff8b\016\uff8b\025" +
    "\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b" +
    "\050\uff8b\051\uff8b\052\uff8b\061\126\067\uff8b\001\002\000" +
    "\052\004\uff91\005\uff91\006\uff91\007\uff91\010\114\012\uff91" +
    "\014\uff91\016\uff91\025\uff91\042\uff91\043\uff91\044\uff91\045" +
    "\uff91\046\uff91\047\uff91\050\uff91\051\uff91\052\uff91\061\uff91" +
    "\067\uff91\001\002\000\052\004\131\005\121\006\130\007" +
    "\124\010\114\012\uff8d\014\uff8d\016\uff8d\025\uff8d\042\uff8d" +
    "\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051" +
    "\uff8d\052\uff8d\061\126\067\uff8d\001\002\000\052\004\uff93" +
    "\005\uff93\006\uff93\007\uff93\010\114\012\uff93\014\uff93\016" +
    "\uff93\025\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93" +
    "\047\uff93\050\uff93\051\uff93\052\uff93\061\uff93\067\uff93\001" +
    "\002\000\052\004\131\005\121\006\130\007\124\010\114" +
    "\012\uff8c\014\uff8c\016\uff8c\025\uff8c\042\uff8c\043\uff8c\044" +
    "\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c" +
    "\061\126\067\uff8c\001\002\000\052\004\131\005\121\006" +
    "\130\007\124\010\114\012\uff88\014\uff88\016\uff88\025\uff88" +
    "\042\132\043\116\044\125\045\113\046\123\047\127\050" +
    "\uff88\051\uff88\052\uff88\061\126\067\uff88\001\002\000\052" +
    "\004\uff95\005\uff95\006\130\007\124\010\114\012\uff95\014" +
    "\uff95\016\uff95\025\uff95\042\uff95\043\uff95\044\uff95\045\uff95" +
    "\046\uff95\047\uff95\050\uff95\051\uff95\052\uff95\061\126\067" +
    "\uff95\001\002\000\052\004\131\005\121\006\130\007\124" +
    "\010\114\012\uff89\014\uff89\016\uff89\025\uff89\042\132\043" +
    "\116\044\125\045\113\046\123\047\127\050\uff89\051\uff89" +
    "\052\122\061\126\067\uff89\001\002\000\052\004\131\005" +
    "\121\006\130\007\124\010\114\012\uff8a\014\uff8a\016\uff8a" +
    "\025\uff8a\042\132\043\116\044\125\045\113\046\123\047" +
    "\127\050\uff8a\051\120\052\122\061\126\067\uff8a\001\002" +
    "\000\052\004\131\005\121\006\130\007\124\010\114\012" +
    "\uff90\014\uff90\016\uff90\025\uff90\042\uff90\043\uff90\044\uff90" +
    "\045\uff90\046\uff90\047\uff90\050\uff90\051\uff90\052\uff90\061" +
    "\126\067\uff90\001\002\000\052\004\uff92\005\uff92\006\uff92" +
    "\007\uff92\010\uff92\012\uff92\014\uff92\016\uff92\025\uff92\042" +
    "\uff92\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92" +
    "\051\uff92\052\uff92\061\uff92\067\uff92\001\002\000\052\004" +
    "\131\005\121\006\130\007\124\010\114\012\uff8e\014\uff8e" +
    "\016\uff8e\025\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046" +
    "\uff8e\047\uff8e\050\uff8e\051\uff8e\052\uff8e\061\126\067\uff8e" +
    "\001\002\000\006\011\154\075\155\001\002\000\010\011" +
    "\uffaf\035\uffaf\075\uffaf\001\002\000\034\005\101\011\075" +
    "\012\164\027\105\030\107\031\102\032\110\033\100\034" +
    "\103\035\076\053\077\077\111\114\104\001\002\000\004" +
    "\027\162\001\002\000\054\004\uff84\005\uff84\006\uff84\007" +
    "\uff84\010\uff84\012\uff84\014\uff84\016\uff84\025\uff84\042\uff84" +
    "\043\uff84\044\uff84\045\uff84\046\uff84\047\uff84\050\uff84\051" +
    "\uff84\052\uff84\061\uff84\067\uff84\075\157\001\002\000\004" +
    "\027\160\001\002\000\004\076\161\001\002\000\066\004" +
    "\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5" +
    "\013\uffa5\014\uffa5\016\uffa5\025\uffa5\042\uffa5\043\uffa5\044" +
    "\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5" +
    "\061\uffa5\067\uffa5\071\uffa5\072\uffa5\075\uffa5\113\uffa5\001" +
    "\002\000\004\076\163\001\002\000\066\004\uffa4\005\uffa4" +
    "\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4\014" +
    "\uffa4\016\uffa4\025\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4" +
    "\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\061\uffa4\067" +
    "\uffa4\071\uffa4\072\uffa4\075\uffa4\113\uffa4\001\002\000\052" +
    "\004\uff82\005\uff82\006\uff82\007\uff82\010\uff82\012\uff82\014" +
    "\uff82\016\uff82\025\uff82\042\uff82\043\uff82\044\uff82\045\uff82" +
    "\046\uff82\047\uff82\050\uff82\051\uff82\052\uff82\061\uff82\067" +
    "\uff82\001\002\000\006\012\167\025\170\001\002\000\046" +
    "\004\131\005\121\006\130\007\124\010\114\012\uffd6\016" +
    "\uffd6\025\uffd6\042\132\043\116\044\125\045\113\046\123" +
    "\047\127\050\117\051\120\052\122\061\126\001\002\000" +
    "\052\004\uff83\005\uff83\006\uff83\007\uff83\010\uff83\012\uff83" +
    "\014\uff83\016\uff83\025\uff83\042\uff83\043\uff83\044\uff83\045" +
    "\uff83\046\uff83\047\uff83\050\uff83\051\uff83\052\uff83\061\uff83" +
    "\067\uff83\001\002\000\032\005\101\011\075\027\105\030" +
    "\107\031\102\032\110\033\100\034\103\035\076\053\077" +
    "\077\111\114\104\001\002\000\046\004\131\005\121\006" +
    "\130\007\124\010\114\012\uffd7\016\uffd7\025\uffd7\042\132" +
    "\043\116\044\125\045\113\046\123\047\127\050\117\051" +
    "\120\052\122\061\126\001\002\000\034\005\101\011\075" +
    "\012\177\027\105\030\107\031\102\032\110\033\100\034" +
    "\103\035\076\053\077\077\111\114\104\001\002\000\004" +
    "\035\076\001\002\000\052\004\uff9a\005\uff9a\006\uff9a\007" +
    "\uff9a\010\uff9a\012\uff9a\014\uff9a\016\uff9a\025\uff9a\042\uff9a" +
    "\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051" +
    "\uff9a\052\uff9a\061\uff9a\067\uff9a\001\002\000\052\004\uff99" +
    "\005\uff99\006\uff99\007\uff99\010\uff99\012\uff99\014\uff99\016" +
    "\uff99\025\uff99\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99" +
    "\047\uff99\050\uff99\051\uff99\052\uff99\061\uff99\067\uff99\001" +
    "\002\000\064\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9" +
    "\011\uffb9\012\uffb9\013\uffb9\014\uffb9\016\uffb9\025\uffb9\042" +
    "\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9" +
    "\051\uffb9\052\uffb9\061\uffb9\067\uffb9\071\uffb9\072\uffb9\113" +
    "\uffb9\001\002\000\052\004\uff97\005\uff97\006\uff97\007\uff97" +
    "\010\uff97\012\uff97\014\uff97\016\uff97\025\uff97\042\uff97\043" +
    "\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050\uff97\051\uff97" +
    "\052\uff97\061\uff97\067\uff97\001\002\000\006\012\201\025" +
    "\170\001\002\000\052\004\uff98\005\uff98\006\uff98\007\uff98" +
    "\010\uff98\012\uff98\014\uff98\016\uff98\025\uff98\042\uff98\043" +
    "\uff98\044\uff98\045\uff98\046\uff98\047\uff98\050\uff98\051\uff98" +
    "\052\uff98\061\uff98\067\uff98\001\002\000\052\004\uff86\005" +
    "\uff86\006\130\007\124\010\114\012\uff86\014\uff86\016\uff86" +
    "\025\uff86\042\uff86\043\uff86\044\uff86\045\uff86\046\uff86\047" +
    "\uff86\050\uff86\051\uff86\052\uff86\061\126\067\uff86\001\002" +
    "\000\052\004\131\005\121\006\130\007\124\010\114\012" +
    "\uff87\014\uff87\016\uff87\025\uff87\042\132\043\116\044\125" +
    "\045\113\046\123\047\127\050\uff87\051\uff87\052\uff87\061" +
    "\126\067\uff87\001\002\000\066\004\uffb6\005\uffb6\006\uffb6" +
    "\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\016" +
    "\uffb6\025\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6" +
    "\047\uffb6\050\uffb6\051\uffb6\052\uffb6\061\uffb6\067\uffb6\071" +
    "\uffb6\072\uffb6\075\157\113\uffb6\001\002\000\042\004\131" +
    "\005\121\006\130\007\124\010\114\012\206\042\132\043" +
    "\116\044\125\045\113\046\123\047\127\050\117\051\120" +
    "\052\122\061\126\001\002\000\052\004\uff85\005\uff85\006" +
    "\uff85\007\uff85\010\uff85\012\uff85\014\uff85\016\uff85\025\uff85" +
    "\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85\050" +
    "\uff85\051\uff85\052\uff85\061\uff85\067\uff85\001\002\000\032" +
    "\005\101\011\075\027\105\030\107\031\102\032\110\033" +
    "\100\034\103\035\076\053\077\077\111\114\104\001\002" +
    "\000\042\004\131\005\121\006\130\007\124\010\114\025" +
    "\211\042\132\043\116\044\125\045\113\046\123\047\127" +
    "\050\117\051\120\052\122\061\126\001\002\000\032\005" +
    "\101\011\075\027\105\030\107\031\102\032\110\033\100" +
    "\034\103\035\076\053\077\077\111\114\104\001\002\000" +
    "\042\004\131\005\121\006\130\007\124\010\114\012\213" +
    "\042\132\043\116\044\125\045\113\046\123\047\127\050" +
    "\117\051\120\052\122\061\126\001\002\000\004\014\214" +
    "\001\002\000\064\002\uffe9\016\uffe9\017\uffe9\020\uffe9\021" +
    "\uffe9\022\uffe9\023\uffe9\024\uffe9\026\uffe9\035\uffe9\036\uffe9" +
    "\037\uffe9\041\uffe9\054\uffe9\056\uffe9\057\uffe9\060\uffe9\062" +
    "\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9\074\uffe9\115\uffe9" +
    "\124\uffe9\001\002\000\064\002\ufff1\016\ufff1\017\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\026\ufff1\035\ufff1" +
    "\036\ufff1\037\ufff1\041\ufff1\054\ufff1\056\ufff1\057\ufff1\060" +
    "\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\074\ufff1" +
    "\115\ufff1\124\ufff1\001\002\000\004\002\001\001\002\000" +
    "\032\005\101\011\075\027\105\030\107\031\102\032\110" +
    "\033\100\034\103\035\076\053\077\077\111\114\104\001" +
    "\002\000\042\004\131\005\121\006\130\007\124\010\114" +
    "\012\221\042\132\043\116\044\125\045\113\046\123\047" +
    "\127\050\117\051\120\052\122\061\126\001\002\000\004" +
    "\014\uffcf\001\002\000\064\002\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\026\ufff4\035\ufff4" +
    "\036\ufff4\037\ufff4\041\ufff4\054\ufff4\056\ufff4\057\ufff4\060" +
    "\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4\066\ufff4\074\ufff4" +
    "\115\ufff4\124\ufff4\001\002\000\064\002\ufffd\016\ufffd\017" +
    "\ufffd\020\ufffd\021\ufffd\022\ufffd\023\ufffd\024\ufffd\026\ufffd" +
    "\035\ufffd\036\ufffd\037\ufffd\041\ufffd\054\ufffd\056\ufffd\057" +
    "\ufffd\060\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd" +
    "\074\ufffd\115\ufffd\124\ufffd\001\002\000\064\002\ufffc\016" +
    "\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc" +
    "\026\ufffc\035\ufffc\036\ufffc\037\ufffc\041\ufffc\054\ufffc\056" +
    "\ufffc\057\ufffc\060\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc" +
    "\066\ufffc\074\ufffc\115\ufffc\124\ufffc\001\002\000\006\015" +
    "\066\054\226\001\002\000\004\011\230\001\002\000\064" +
    "\002\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023" +
    "\uffbf\024\uffbf\026\uffbf\035\uffbf\036\uffbf\037\uffbf\041\uffbf" +
    "\054\uffbf\056\uffbf\057\uffbf\060\uffbf\062\uffbf\063\uffbf\064" +
    "\uffbf\065\uffbf\066\uffbf\074\uffbf\115\uffbf\124\uffbf\001\002" +
    "\000\032\005\101\011\075\027\105\030\107\031\102\032" +
    "\110\033\100\034\103\035\076\053\077\077\111\114\104" +
    "\001\002\000\042\004\131\005\121\006\130\007\124\010" +
    "\114\012\232\042\132\043\116\044\125\045\113\046\123" +
    "\047\127\050\117\051\120\052\122\061\126\001\002\000" +
    "\004\015\066\001\002\000\066\002\uffbd\016\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\026\uffbd\035" +
    "\uffbd\036\uffbd\037\uffbd\041\uffbd\054\uffbd\055\uffbd\056\uffbd" +
    "\057\uffbd\060\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066" +
    "\uffbd\074\uffbd\115\uffbd\124\uffbd\001\002\000\004\012\235" +
    "\001\002\000\004\014\236\001\002\000\064\002\uffd3\016" +
    "\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\026\uffd3\035\uffd3\036\uffd3\037\uffd3\041\uffd3\054\uffd3\056" +
    "\uffd3\057\uffd3\060\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3" +
    "\066\uffd3\074\uffd3\115\uffd3\124\uffd3\001\002\000\032\005" +
    "\101\011\075\027\105\030\107\031\102\032\110\033\100" +
    "\034\103\035\076\053\077\077\111\114\104\001\002\000" +
    "\042\004\131\005\121\006\130\007\124\010\114\012\241" +
    "\042\132\043\116\044\125\045\113\046\123\047\127\050" +
    "\117\051\120\052\122\061\126\001\002\000\004\014\uffd0" +
    "\001\002\000\064\002\ufffa\016\ufffa\017\ufffa\020\ufffa\021" +
    "\ufffa\022\ufffa\023\ufffa\024\ufffa\026\ufffa\035\ufffa\036\ufffa" +
    "\037\ufffa\041\ufffa\054\ufffa\056\ufffa\057\ufffa\060\ufffa\062" +
    "\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa\074\ufffa\115\ufffa" +
    "\124\ufffa\001\002\000\020\017\033\020\056\021\035\022" +
    "\057\023\034\026\010\035\050\001\002\000\004\014\uffc6" +
    "\001\002\000\004\035\274\001\002\000\006\013\257\113" +
    "\173\001\002\000\004\014\uffc7\001\002\000\004\014\251" +
    "\001\002\000\032\005\101\011\075\027\105\030\107\031" +
    "\102\032\110\033\100\034\103\035\076\053\077\077\111" +
    "\114\104\001\002\000\042\004\131\005\121\006\130\007" +
    "\124\010\114\014\253\042\132\043\116\044\125\045\113" +
    "\046\123\047\127\050\117\051\120\052\122\061\126\001" +
    "\002\000\032\005\101\011\075\027\105\030\107\031\102" +
    "\032\110\033\100\034\103\035\076\053\077\077\111\114" +
    "\104\001\002\000\042\004\131\005\121\006\130\007\124" +
    "\010\114\012\255\042\132\043\116\044\125\045\113\046" +
    "\123\047\127\050\117\051\120\052\122\061\126\001\002" +
    "\000\004\015\066\001\002\000\064\002\uffc8\016\uffc8\017" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\026\uffc8" +
    "\035\uffc8\036\uffc8\037\uffc8\041\uffc8\054\uffc8\056\uffc8\057" +
    "\uffc8\060\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8" +
    "\074\uffc8\115\uffc8\124\uffc8\001\002\000\034\005\101\011" +
    "\075\015\263\027\105\030\107\031\102\032\110\033\100" +
    "\034\103\035\076\053\077\077\111\114\104\001\002\000" +
    "\004\014\uffdf\001\002\000\010\012\uffa3\014\uffa3\025\uffa3" +
    "\001\002\000\046\004\131\005\121\006\130\007\124\010" +
    "\114\012\uffa2\014\uffa2\025\uffa2\042\132\043\116\044\125" +
    "\045\113\046\123\047\127\050\117\051\120\052\122\061" +
    "\126\001\002\000\036\005\101\011\075\015\263\016\267" +
    "\027\105\030\107\031\102\032\110\033\100\034\103\035" +
    "\076\053\077\077\111\114\104\001\002\000\006\016\273" +
    "\025\170\001\002\000\006\016\271\025\270\001\002\000" +
    "\006\016\uffa8\025\uffa8\001\002\000\012\012\uffac\014\uffac" +
    "\016\uffac\025\uffac\001\002\000\004\015\263\001\002\000" +
    "\012\012\uffaa\014\uffaa\016\uffaa\025\uffaa\001\002\000\006" +
    "\016\uffa9\025\uffa9\001\002\000\012\012\uffab\014\uffab\016" +
    "\uffab\025\uffab\001\002\000\012\012\uffe0\013\275\014\uffe0" +
    "\025\uffe0\001\002\000\034\005\101\011\075\015\263\027" +
    "\105\030\107\031\102\032\110\033\100\034\103\035\076" +
    "\053\077\077\111\114\104\001\002\000\010\012\uffe1\014" +
    "\uffe1\025\uffe1\001\002\000\032\005\101\011\075\027\105" +
    "\030\107\031\102\032\110\033\100\034\103\035\076\053" +
    "\077\077\111\114\104\001\002\000\042\004\131\005\121" +
    "\006\130\007\124\010\114\012\301\042\132\043\116\044" +
    "\125\045\113\046\123\047\127\050\117\051\120\052\122" +
    "\061\126\001\002\000\004\015\066\001\002\000\064\002" +
    "\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\024\uffc0\026\uffc0\035\uffc0\036\uffc0\037\uffc0\041\uffc0\054" +
    "\uffc0\056\uffc0\057\uffc0\060\uffc0\062\uffc0\063\uffc0\064\uffc0" +
    "\065\uffc0\066\uffc0\074\uffc0\115\uffc0\124\uffc0\001\002\000" +
    "\050\005\101\011\075\012\313\017\033\020\056\021\035" +
    "\022\057\023\034\026\010\027\105\030\107\031\102\032" +
    "\110\033\100\034\103\035\050\053\077\077\111\114\104" +
    "\001\002\000\004\014\307\001\002\000\004\014\306\001" +
    "\002\000\064\002\uffca\016\uffca\017\uffca\020\uffca\021\uffca" +
    "\022\uffca\023\uffca\024\uffca\026\uffca\035\uffca\036\uffca\037" +
    "\uffca\041\uffca\054\uffca\056\uffca\057\uffca\060\uffca\062\uffca" +
    "\063\uffca\064\uffca\065\uffca\066\uffca\074\uffca\115\uffca\124" +
    "\uffca\001\002\000\064\002\uffcb\016\uffcb\017\uffcb\020\uffcb" +
    "\021\uffcb\022\uffcb\023\uffcb\024\uffcb\026\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\041\uffcb\054\uffcb\056\uffcb\057\uffcb\060\uffcb" +
    "\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\074\uffcb\115" +
    "\uffcb\124\uffcb\001\002\000\006\012\322\025\170\001\002" +
    "\000\006\012\uffd4\025\uffd4\001\002\000\006\012\316\025" +
    "\317\001\002\000\006\014\315\015\066\001\002\000\064" +
    "\002\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023" +
    "\uffe2\024\uffe2\026\uffe2\035\uffe2\036\uffe2\037\uffe2\041\uffe2" +
    "\054\uffe2\056\uffe2\057\uffe2\060\uffe2\062\uffe2\063\uffe2\064" +
    "\uffe2\065\uffe2\066\uffe2\074\uffe2\115\uffe2\124\uffe2\001\002" +
    "\000\064\002\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022" +
    "\uffd8\023\uffd8\024\uffd8\026\uffd8\035\uffd8\036\uffd8\037\uffd8" +
    "\041\uffd8\054\uffd8\056\uffd8\057\uffd8\060\uffd8\062\uffd8\063" +
    "\uffd8\064\uffd8\065\uffd8\066\uffd8\074\uffd8\115\uffd8\124\uffd8" +
    "\001\002\000\004\015\066\001\002\000\020\017\033\020" +
    "\056\021\035\022\057\023\034\026\010\035\153\001\002" +
    "\000\006\012\uffd5\025\uffd5\001\002\000\064\002\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\026\uffe3\035\uffe3\036\uffe3\037\uffe3\041\uffe3\054\uffe3\056" +
    "\uffe3\057\uffe3\060\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3" +
    "\066\uffe3\074\uffe3\115\uffe3\124\uffe3\001\002\000\004\014" +
    "\323\001\002\000\064\002\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\023\uffd9\024\uffd9\026\uffd9\035\uffd9\036" +
    "\uffd9\037\uffd9\041\uffd9\054\uffd9\056\uffd9\057\uffd9\060\uffd9" +
    "\062\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9\074\uffd9\115" +
    "\uffd9\124\uffd9\001\002\000\032\005\101\011\075\027\105" +
    "\030\107\031\102\032\110\033\100\034\103\035\076\053" +
    "\077\077\111\114\104\001\002\000\042\004\131\005\121" +
    "\006\130\007\124\010\114\012\326\042\132\043\116\044" +
    "\125\045\113\046\123\047\127\050\117\051\120\052\122" +
    "\061\126\001\002\000\004\015\066\001\002\000\066\002" +
    "\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc" +
    "\024\uffbc\026\uffbc\035\uffbc\036\uffbc\037\uffbc\041\uffbc\054" +
    "\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\062\uffbc\063\uffbc" +
    "\064\uffbc\065\uffbc\066\uffbc\074\uffbc\115\uffbc\124\uffbc\001" +
    "\002\000\004\014\uffcc\001\002\000\032\005\101\011\075" +
    "\027\105\030\107\031\102\032\110\033\100\034\103\035" +
    "\076\053\077\077\111\114\104\001\002\000\042\004\131" +
    "\005\121\006\130\007\124\010\114\012\333\042\132\043" +
    "\116\044\125\045\113\046\123\047\127\050\117\051\120" +
    "\052\122\061\126\001\002\000\004\015\334\001\002\000" +
    "\006\065\337\066\336\001\002\000\010\016\347\065\346" +
    "\066\345\001\002\000\004\067\343\001\002\000\032\005" +
    "\101\011\075\027\105\030\107\031\102\032\110\033\100" +
    "\034\103\035\076\053\077\077\111\114\104\001\002\000" +
    "\042\004\131\005\121\006\130\007\124\010\114\042\132" +
    "\043\116\044\125\045\113\046\123\047\127\050\117\051" +
    "\120\052\122\061\126\067\341\001\002\000\054\017\033" +
    "\020\056\021\035\022\057\023\034\024\011\026\010\035" +
    "\050\036\041\037\051\041\063\054\025\056\031\057\022" +
    "\060\052\062\036\063\064\064\021\074\017\115\023\124" +
    "\042\001\002\000\062\016\uffc2\017\033\020\056\021\035" +
    "\022\057\023\034\024\011\026\010\035\050\036\041\037" +
    "\051\041\063\054\025\056\031\057\022\060\052\062\036" +
    "\063\064\064\021\065\uffc2\066\uffc2\074\017\115\023\124" +
    "\042\001\002\000\054\017\033\020\056\021\035\022\057" +
    "\023\034\024\011\026\010\035\050\036\041\037\051\041" +
    "\063\054\025\056\031\057\022\060\052\062\036\063\064" +
    "\064\021\074\017\115\023\124\042\001\002\000\062\016" +
    "\uffc1\017\033\020\056\021\035\022\057\023\034\024\011" +
    "\026\010\035\050\036\041\037\051\041\063\054\025\056" +
    "\031\057\022\060\052\062\036\063\064\064\021\065\uffc1" +
    "\066\uffc1\074\017\115\023\124\042\001\002\000\004\067" +
    "\353\001\002\000\032\005\101\011\075\027\105\030\107" +
    "\031\102\032\110\033\100\034\103\035\076\053\077\077" +
    "\111\114\104\001\002\000\064\002\uffc5\016\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\026\uffc5\035" +
    "\uffc5\036\uffc5\037\uffc5\041\uffc5\054\uffc5\056\uffc5\057\uffc5" +
    "\060\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\074" +
    "\uffc5\115\uffc5\124\uffc5\001\002\000\042\004\131\005\121" +
    "\006\130\007\124\010\114\042\132\043\116\044\125\045" +
    "\113\046\123\047\127\050\117\051\120\052\122\061\126" +
    "\067\351\001\002\000\054\017\033\020\056\021\035\022" +
    "\057\023\034\024\011\026\010\035\050\036\041\037\051" +
    "\041\063\054\025\056\031\057\022\060\052\062\036\063" +
    "\064\064\021\074\017\115\023\124\042\001\002\000\062" +
    "\016\uffc4\017\033\020\056\021\035\022\057\023\034\024" +
    "\011\026\010\035\050\036\041\037\051\041\063\054\025" +
    "\056\031\057\022\060\052\062\036\063\064\064\021\065" +
    "\uffc4\066\uffc4\074\017\115\023\124\042\001\002\000\054" +
    "\017\033\020\056\021\035\022\057\023\034\024\011\026" +
    "\010\035\050\036\041\037\051\041\063\054\025\056\031" +
    "\057\022\060\052\062\036\063\064\064\021\074\017\115" +
    "\023\124\042\001\002\000\062\016\uffc3\017\033\020\056" +
    "\021\035\022\057\023\034\024\011\026\010\035\050\036" +
    "\041\037\051\041\063\054\025\056\031\057\022\060\052" +
    "\062\036\063\064\064\021\065\uffc3\066\uffc3\074\017\115" +
    "\023\124\042\001\002\000\064\002\uffd2\016\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\026\uffd2\035" +
    "\uffd2\036\uffd2\037\uffd2\041\uffd2\054\uffd2\056\uffd2\057\uffd2" +
    "\060\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\074" +
    "\uffd2\115\uffd2\124\uffd2\001\002\000\042\004\131\005\121" +
    "\006\130\007\124\010\114\014\357\042\132\043\116\044" +
    "\125\045\113\046\123\047\127\050\117\051\120\052\122" +
    "\061\126\001\002\000\064\002\uffd1\016\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\026\uffd1\035\uffd1" +
    "\036\uffd1\037\uffd1\041\uffd1\054\uffd1\056\uffd1\057\uffd1\060" +
    "\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\074\uffd1" +
    "\115\uffd1\124\uffd1\001\002\000\064\002\ufff9\016\ufff9\017" +
    "\ufff9\020\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\026\ufff9" +
    "\035\ufff9\036\ufff9\037\ufff9\041\ufff9\054\ufff9\056\ufff9\057" +
    "\ufff9\060\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9" +
    "\074\ufff9\115\ufff9\124\ufff9\001\002\000\064\002\ufffb\016" +
    "\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb" +
    "\026\ufffb\035\ufffb\036\ufffb\037\ufffb\041\ufffb\054\ufffb\056" +
    "\ufffb\057\ufffb\060\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb" +
    "\066\ufffb\074\ufffb\115\ufffb\124\ufffb\001\002\000\006\035" +
    "\uffae\075\365\001\002\000\004\076\364\001\002\000\006" +
    "\035\uffa6\075\uffa6\001\002\000\004\076\366\001\002\000" +
    "\006\035\uffa7\075\uffa7\001\002\000\004\015\371\001\002" +
    "\000\064\002\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022" +
    "\uffda\023\uffda\024\uffda\026\uffda\035\uffda\036\uffda\037\uffda" +
    "\041\uffda\054\uffda\056\uffda\057\uffda\060\uffda\062\uffda\063" +
    "\uffda\064\uffda\065\uffda\066\uffda\074\uffda\115\uffda\124\uffda" +
    "\001\002\000\022\016\u0100\017\033\020\056\021\035\022" +
    "\057\023\034\026\010\035\050\001\002\000\022\016\u0106" +
    "\017\033\020\056\021\035\022\057\023\034\026\010\035" +
    "\050\001\002\000\022\016\uffdd\017\uffdd\020\uffdd\021\uffdd" +
    "\022\uffdd\023\uffdd\026\uffdd\035\uffdd\001\002\000\004\014" +
    "\u0104\001\002\000\010\011\u0102\013\257\113\173\001\002" +
    "\000\004\014\u0101\001\002\000\022\016\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\026\uffe8\035\uffe8\001\002" +
    "\000\064\002\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\026\uffdc\035\uffdc\036\uffdc\037\uffdc" +
    "\041\uffdc\054\uffdc\056\uffdc\057\uffdc\060\uffdc\062\uffdc\063" +
    "\uffdc\064\uffdc\065\uffdc\066\uffdc\074\uffdc\115\uffdc\124\uffdc" +
    "\001\002\000\022\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\026\uffe6\035\uffe6\001\002\000\022\012\u0103" +
    "\017\033\020\056\021\035\022\057\023\034\026\010\035" +
    "\153\001\002\000\004\015\066\001\002\000\022\016\uffe7" +
    "\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\026\uffe7\035" +
    "\uffe7\001\002\000\022\016\uffde\017\uffde\020\uffde\021\uffde" +
    "\022\uffde\023\uffde\026\uffde\035\uffde\001\002\000\064\002" +
    "\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb" +
    "\024\uffdb\026\uffdb\035\uffdb\036\uffdb\037\uffdb\041\uffdb\054" +
    "\uffdb\056\uffdb\057\uffdb\060\uffdb\062\uffdb\063\uffdb\064\uffdb" +
    "\065\uffdb\066\uffdb\074\uffdb\115\uffdb\124\uffdb\001\002\000" +
    "\010\011\u0108\013\275\014\uffe0\001\002\000\022\012\u0109" +
    "\017\033\020\056\021\035\022\057\023\034\026\010\035" +
    "\153\001\002\000\004\015\066\001\002\000\006\012\u010b" +
    "\025\317\001\002\000\004\015\066\001\002\000\064\002" +
    "\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5" +
    "\024\uffe5\026\uffe5\035\uffe5\036\uffe5\037\uffe5\041\uffe5\054" +
    "\uffe5\056\uffe5\057\uffe5\060\uffe5\062\uffe5\063\uffe5\064\uffe5" +
    "\065\uffe5\066\uffe5\074\uffe5\115\uffe5\124\uffe5\001\002\000" +
    "\064\002\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4" +
    "\023\uffe4\024\uffe4\026\uffe4\035\uffe4\036\uffe4\037\uffe4\041" +
    "\uffe4\054\uffe4\056\uffe4\057\uffe4\060\uffe4\062\uffe4\063\uffe4" +
    "\064\uffe4\065\uffe4\066\uffe4\074\uffe4\115\uffe4\124\uffe4\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010b\000\072\002\054\003\004\005\017\007\045\010" +
    "\043\011\012\012\037\013\015\014\013\015\036\016\060" +
    "\017\044\021\046\022\057\023\006\024\061\025\014\026" +
    "\027\027\026\030\023\031\031\032\052\033\053\036\011" +
    "\037\005\040\042\044\025\053\003\001\001\000\002\001" +
    "\001\000\066\005\071\007\045\010\043\011\012\012\037" +
    "\013\015\014\013\015\036\016\060\017\044\021\046\022" +
    "\057\023\006\024\061\025\014\026\027\027\026\030\023" +
    "\031\031\032\052\033\053\036\011\037\005\040\042\044" +
    "\025\053\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\361\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\034\355\044\105\053\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\064\001\001\000\002\001" +
    "\001\000\070\003\066\005\017\007\045\010\043\011\012" +
    "\012\037\013\015\014\013\015\036\016\060\017\044\021" +
    "\046\022\057\023\006\024\061\025\014\026\027\027\026" +
    "\030\023\031\031\032\052\033\053\036\011\037\005\040" +
    "\042\044\025\053\003\001\001\000\066\005\071\007\045" +
    "\010\043\011\012\012\037\013\015\014\013\015\036\016" +
    "\060\017\044\021\046\022\057\023\006\024\061\025\014" +
    "\026\027\027\026\030\023\031\031\032\052\033\053\036" +
    "\011\037\005\040\042\044\025\053\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\034\111\044\105\053\003\001\001\000\010" +
    "\034\204\044\105\053\003\001\001\000\004\046\203\001" +
    "\001\000\010\034\202\044\105\053\003\001\001\000\002" +
    "\001\001\000\010\034\201\044\105\053\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\151\001\001\000\002\001\001\000\010" +
    "\034\150\044\105\053\003\001\001\000\010\034\147\044" +
    "\105\053\003\001\001\000\002\001\001\000\010\034\146" +
    "\044\105\053\003\001\001\000\010\034\145\044\105\053" +
    "\003\001\001\000\010\034\144\044\105\053\003\001\001" +
    "\000\010\034\143\044\105\053\003\001\001\000\010\034" +
    "\142\044\105\053\003\001\001\000\010\034\141\044\105" +
    "\053\003\001\001\000\010\034\140\044\105\053\003\001" +
    "\001\000\010\034\137\044\105\053\003\001\001\000\010" +
    "\034\136\044\105\053\003\001\001\000\010\034\135\044" +
    "\105\053\003\001\001\000\010\034\134\044\105\053\003" +
    "\001\001\000\010\034\133\044\105\053\003\001\001\000" +
    "\010\034\132\044\105\053\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\155\001\001\000\002\001" +
    "\001\000\012\034\165\043\164\044\105\053\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\034\170\044\105\053\003" +
    "\001\001\000\002\001\001\000\012\034\165\043\177\044" +
    "\105\053\003\001\001\000\004\053\175\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\034\207\044\105\053\003\001\001" +
    "\000\002\001\001\000\010\034\211\044\105\053\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\034\217\044" +
    "\105\053\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\226\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\034\230\044\105\053\003\001\001\000\002\001" +
    "\001\000\004\047\232\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\034" +
    "\237\044\105\053\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\007\243\010\246\020" +
    "\247\036\011\037\244\044\245\053\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\034\251\044\105\053\003" +
    "\001\001\000\002\001\001\000\010\034\253\044\105\053" +
    "\003\001\001\000\002\001\001\000\004\047\255\001\001" +
    "\000\002\001\001\000\014\034\261\035\257\044\105\051" +
    "\260\053\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\034\165\043\263\044\105\051" +
    "\265\052\264\053\003\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\271\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\034\261\035\275\044" +
    "\105\051\260\053\003\001\001\000\002\001\001\000\010" +
    "\034\277\044\105\053\003\001\001\000\002\001\001\000" +
    "\004\047\301\001\001\000\002\001\001\000\022\007\310" +
    "\034\165\036\011\037\244\042\311\043\307\044\105\053" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\047\313\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\320\001\001\000" +
    "\010\007\317\036\011\037\244\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\034\324\044\105\053\003\001\001\000\002\001\001" +
    "\000\004\047\326\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\034\331\044\105\053\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\334\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\034\337\044\105" +
    "\053\003\001\001\000\002\001\001\000\070\003\341\005" +
    "\017\007\045\010\043\011\012\012\037\013\015\014\013" +
    "\015\036\016\060\017\044\021\046\022\057\023\006\024" +
    "\061\025\014\026\027\027\026\030\023\031\031\032\052" +
    "\033\053\036\011\037\005\040\042\044\025\053\003\001" +
    "\001\000\066\005\071\007\045\010\043\011\012\012\037" +
    "\013\015\014\013\015\036\016\060\017\044\021\046\022" +
    "\057\023\006\024\061\025\014\026\027\027\026\030\023" +
    "\031\031\032\052\033\053\036\011\037\005\040\042\044" +
    "\025\053\003\001\001\000\070\003\343\005\017\007\045" +
    "\010\043\011\012\012\037\013\015\014\013\015\036\016" +
    "\060\017\044\021\046\022\057\023\006\024\061\025\014" +
    "\026\027\027\026\030\023\031\031\032\052\033\053\036" +
    "\011\037\005\040\042\044\025\053\003\001\001\000\066" +
    "\005\071\007\045\010\043\011\012\012\037\013\015\014" +
    "\013\015\036\016\060\017\044\021\046\022\057\023\006" +
    "\024\061\025\014\026\027\027\026\030\023\031\031\032" +
    "\052\033\053\036\011\037\005\040\042\044\025\053\003" +
    "\001\001\000\002\001\001\000\010\034\347\044\105\053" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\070" +
    "\003\351\005\017\007\045\010\043\011\012\012\037\013" +
    "\015\014\013\015\036\016\060\017\044\021\046\022\057" +
    "\023\006\024\061\025\014\026\027\027\026\030\023\031" +
    "\031\032\052\033\053\036\011\037\005\040\042\044\025" +
    "\053\003\001\001\000\066\005\071\007\045\010\043\011" +
    "\012\012\037\013\015\014\013\015\036\016\060\017\044" +
    "\021\046\022\057\023\006\024\061\025\014\026\027\027" +
    "\026\030\023\031\031\032\052\033\053\036\011\037\005" +
    "\040\042\044\025\053\003\001\001\000\070\003\353\005" +
    "\017\007\045\010\043\011\012\012\037\013\015\014\013" +
    "\015\036\016\060\017\044\021\046\022\057\023\006\024" +
    "\061\025\014\026\027\027\026\030\023\031\031\032\052" +
    "\033\053\036\011\037\005\040\042\044\025\053\003\001" +
    "\001\000\066\005\071\007\045\010\043\011\012\012\037" +
    "\013\015\014\013\015\036\016\060\017\044\021\046\022" +
    "\057\023\006\024\061\025\014\026\027\027\026\030\023" +
    "\031\031\032\052\033\053\036\011\037\005\040\042\044" +
    "\025\053\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\367\001\001\000" +
    "\002\001\001\000\024\004\371\006\372\007\373\010\375" +
    "\025\376\036\011\037\005\044\374\053\003\001\001\000" +
    "\022\006\u0104\007\373\010\375\025\376\036\011\037\005" +
    "\044\374\053\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\310\036" +
    "\011\037\244\042\311\001\001\000\004\047\313\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\007\310\036\011\037\244\042\u0109" +
    "\001\001\000\004\047\u010c\001\001\000\002\001\001\000" +
    "\004\047\u010b\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


   

    /* Variable que guarda el árbol de sintáxis abstracta generado luego del análisis sintáctico */
    public AST AST;
    
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
            System.err.println("Error Sintáctico en la Línea " + (s.left) +" Columna "+s.right+ ". No se esperaba este componente: " + s.value + ".");
            Errores errrores = new Errores(Errores.enumTipoError.sintactico , "Error Sintáctico en la Línea " + (s.left) +" Columna " + s.right + ". No se esperaba este componente: " +s.value+".");
    //Interfaz.lista_errores.add(new CError("Sintáctico", "No se esperaba este componente '" + s.value + "'", s.left, s.right));
    
    } 
    /**
     * Método al que se llama en el momento en que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
            System.err.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido."); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= L_INSTRUCCIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    //se guarda el AST, que es la lista principal de instrucciones en la variable
    //AST que se definió dentro del parser
    
        parser.AST = new AST(a);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // L_INSTRUCCIONES ::= L_INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // L_INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DECLARACION puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= ASIGNACION puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= IMPRIMIR puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= BREAK puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= CONTINUE puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= SENTENCIA_IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= SENTENCIA_WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= SENTENCIA_SWITCH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= SENTENCIA_FOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= SENTENCIA_DO puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= SENTENCIA_INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= SENTENCIA_DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= SENTENCIA_IMPORT puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= METODO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= CONSTRUCTOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= SENTENCIA_LLAMADA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= RETORNO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= DECLARACION_CLASE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= SENTENCIA_GRAFICAR_ENTORNO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= GRAFICAR_DOT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // GRAFICAR_DOT ::= rgraficardot parizquierdo E coma E parderecho puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new GraficarDot(a,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("GRAFICAR_DOT",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INSTRUCCION_CLASE ::= METODO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CLASE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INSTRUCCION_CLASE ::= DECLARACION puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CLASE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INSTRUCCION_CLASE ::= ASIGNACION puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION_CLASE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // METODO ::= T2 id parizquierdo PARAMETROS parderecho BLOQUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Declaracion> c = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque d = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclaraMetodoFuncion(a, b,c,d ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // METODO ::= T2 id parizquierdo parderecho BLOQUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque d = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclaraMetodoFuncion(a, b,d ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // METODO ::= ID parizquierdo PARAMETROS parderecho BLOQUE 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Id> b = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Declaracion> c = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque d = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclaraMetodoFuncion( new Acceso(b) ,c,d ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // METODO ::= ID parizquierdo parderecho BLOQUE 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Id> b = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque d = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclaraMetodoFuncion(new Acceso(b),d ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("METODO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= T2 id igual E1 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(a, b, c, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION ::= T2 id 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Declaracion(a, b, bleft, bright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASIGNACION ::= ID igual E1 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Id> a = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Asignacion(new Acceso(a) ,aleft,aright ,b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // L_INSTRUCCIONES_CLASE ::= L_INSTRUCCIONES_CLASE INSTRUCCION_CLASE 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_INSTRUCCIONES_CLASE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // L_INSTRUCCIONES_CLASE ::= INSTRUCCION_CLASE 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_INSTRUCCIONES_CLASE",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BLOQUE_CLASE ::= llaveizq llaveder 
            {
              Bloque RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_CLASE",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BLOQUE_CLASE ::= llaveizq L_INSTRUCCIONES_CLASE llaveder 
            {
              Bloque RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Bloque(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE_CLASE",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION_CLASE ::= rclass id BLOQUE_CLASE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclaracionClase (a, b, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_CLASE",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_LLAMADA ::= ID parizquierdo PARAMETROS_LLAMADA parderecho puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Id> a = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new InsLlamadaMF(new Acceso(a), b,aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_LLAMADA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_LLAMADA ::= ID parizquierdo parderecho puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Id> a = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new InsLlamadaMF(new Acceso(a),aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_LLAMADA",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PARAMETROS_LLAMADA ::= PARAMETROS_LLAMADA coma E 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		a.add(b) ; RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_LLAMADA",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PARAMETROS_LLAMADA ::= E 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>() ; RESULT.add (a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS_LLAMADA",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PARAMETROS ::= PARAMETROS coma DECLARACION 
            {
              LinkedList<Declaracion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Declaracion> a = (LinkedList<Declaracion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.add((Declaracion)b); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PARAMETROS ::= DECLARACION 
            {
              LinkedList<Declaracion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>() ; RESULT.add((Declaracion)a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_GRAFICAR_ENTORNO ::= rgraficarentornos parizquierdo parderecho puntoycoma 
            {
              Instruccion RESULT =null;
		 RESULT = new GraficarEntornos(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_GRAFICAR_ENTORNO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // RETORNO ::= rreturn puntoycoma 
            {
              Instruccion RESULT =null;
		 RESULT = new Return(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RETORNO ::= rreturn E puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Return (a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNO",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IMPRIMIR ::= rprintln parizquierdo E parderecho 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Imprimir(a,true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IMPRIMIR ::= rprint parizquierdo E parderecho 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Imprimir(a,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BREAK ::= rbreak 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Break(aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BREAK",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONTINUE ::= rcontinue 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Continue(aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_IMPORT ::= rimport cadena 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Import (a , aleft , aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IMPORT",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_INCREMENTO ::= ID masmas puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Id> a = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new InsIncremento( new Acceso(a), aleft, aright) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_INCREMENTO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA_DECREMENTO ::= ID menosmenos puntoycoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Id> a = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new InsDecremento( new Acceso(a), aleft, aright) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DECREMENTO",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA_DO ::= rdo BLOQUE rwhile parizquierdo E parderecho 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Bloque a = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Do (b,a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_DO",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA_FOR ::= rfor parizquierdo ASIGNACION_DECLARACION puntoycoma E puntoycoma E parderecho BLOQUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque d = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new For(a,b,c,d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_FOR",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIGNACION_DECLARACION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_DECLARACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIGNACION_DECLARACION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_DECLARACION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA_SWITCH ::= rswitch parizquierdo E parderecho llaveizq L_CASOS llaveder 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<CondicionSwitch> b = (LinkedList<CondicionSwitch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =new Switch(a,b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // L_CASOS ::= L_CASOS rcase E dospuntos L_INSTRUCCIONES 
            {
              LinkedList<CondicionSwitch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<CondicionSwitch> a = (LinkedList<CondicionSwitch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.add(new CondicionSwitch(b,c)) ; RESULT= a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CASOS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // L_CASOS ::= L_CASOS rdefault dospuntos L_INSTRUCCIONES 
            {
              LinkedList<CondicionSwitch> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<CondicionSwitch> a = (LinkedList<CondicionSwitch>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.add(new CondicionSwitch(c)) ;RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CASOS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // L_CASOS ::= rcase E dospuntos L_INSTRUCCIONES 
            {
              LinkedList<CondicionSwitch> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(new CondicionSwitch(b,c));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CASOS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // L_CASOS ::= rdefault dospuntos L_INSTRUCCIONES 
            {
              LinkedList<CondicionSwitch> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new LinkedList<>(); RESULT.add(new CondicionSwitch(c));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_CASOS",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA_WHILE ::= rwhile parizquierdo E parderecho BLOQUE 
            {
              Instruccion RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While (a, b,zleft, zright) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA_IF ::= L_IF relse BLOQUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<CondicionIf> a = (LinkedList<CondicionIf>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque c = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new If (a,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_IF ::= L_IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<CondicionIf> a = (LinkedList<CondicionIf>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If (a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA_IF",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // L_IF ::= L_IF relse rif parizquierdo E parderecho BLOQUE 
            {
              LinkedList<CondicionIf> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<CondicionIf> a = (LinkedList<CondicionIf>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque c = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.add(new CondicionIf (b, c, bleft, bright)); RESULT = a ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_IF",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // L_IF ::= rif parizquierdo E parderecho BLOQUE 
            {
              LinkedList<CondicionIf> RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(new CondicionIf (a, b, aleft , aright));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("L_IF",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // BLOQUE ::= llaveizq llaveder 
            {
              Bloque RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Bloque(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // BLOQUE ::= llaveizq L_INSTRUCCIONES llaveder 
            {
              Bloque RESULT =null;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String z = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String y = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Bloque(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ID ::= ID punto ID_ACCESOS 
            {
              LinkedList<Id> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Id> a = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Id b = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.add(b); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ID ::= ID_ACCESOS 
            {
              LinkedList<Id> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Id a = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT  = new LinkedList<>(); RESULT.add(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ID_ACCESOS ::= id 
            {
              Id RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Id(a, aleft , aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID_ACCESOS",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ID_ACCESOS ::= id DIMENSIONES_LLENAS 
            {
              Id RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Integer> b = (LinkedList<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Id(a, b, aleft , aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID_ACCESOS",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // T ::= rint 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Tipo(Tipo.EnumTipo.entero); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // T ::= rchar 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipo.EnumTipo.caracter); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // T ::= rboolean 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipo.EnumTipo.booleano); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // T ::= rdouble 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipo.EnumTipo.doble); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // T ::= rstring 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipo.EnumTipo.cadena); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // T ::= rvoid 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipo.EnumTipo.metodo); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // T ::= id 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Tipo(Tipo.EnumTipo.objeto, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // T2 ::= T DIMENSIONES_VACIAS 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Integer> b = (LinkedList<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.dimension = b.size(); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T2",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // T2 ::= T 
            {
              Tipo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T2",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LISTA_ARREGLO ::= llaveizq llaveder 
            {
              Arreglo RESULT =null;
		 RESULT = new Arreglo (); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ARREGLO",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LISTA_ARREGLO ::= llaveizq PARAMETROS_LLAMADA llaveder 
            {
              Arreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Arreglo(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ARREGLO",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // LISTA_ARREGLO ::= llaveizq LISTA_ARREGLO2 llaveder 
            {
              Arreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arreglo a = (Arreglo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ARREGLO",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LISTA_ARREGLO2 ::= LISTA_ARREGLO2 coma LISTA_ARREGLO 
            {
              Arreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Arreglo a = (Arreglo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arreglo b = (Arreglo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 a.contenido.add(b); a.agregar() ;RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ARREGLO2",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LISTA_ARREGLO2 ::= LISTA_ARREGLO 
            {
              Arreglo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arreglo a = (Arreglo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new Arreglo(); RESULT.contenido.add(a); RESULT.calcularProfundidad(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTA_ARREGLO2",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DIMENSIONES_VACIAS ::= DIMENSIONES_VACIAS corizquierdo corderecho 
            {
              LinkedList<Integer> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Integer> a = (LinkedList<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 a.add(0); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES_VACIAS",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DIMENSIONES_VACIAS ::= corizquierdo corderecho 
            {
              LinkedList<Integer> RESULT =null;
		 RESULT = new LinkedList<>() ; RESULT.add(0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES_VACIAS",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DIMENSIONES_LLENAS ::= DIMENSIONES_LLENAS corizquierdo entero corderecho 
            {
              LinkedList<Integer> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Integer> a = (LinkedList<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 a.add(Integer.parseInt(b)); RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES_LLENAS",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DIMENSIONES_LLENAS ::= corizquierdo entero corderecho 
            {
              LinkedList<Integer> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LinkedList<>() ; RESULT.add(Integer.parseInt(a)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DIMENSIONES_LLENAS",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // E1 ::= LISTA_ARREGLO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arreglo a = (Arreglo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E1",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // E1 ::= E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E1",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // E ::= entero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.EnumTipo.entero), a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // E ::= caracter 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.EnumTipo.caracter), a.replace("\'","")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // E ::= rtrue 
            {
              Expresion RESULT =null;
		 RESULT = new Literal(new Tipo(Tipo.EnumTipo.booleano), true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // E ::= rfalse 
            {
              Expresion RESULT =null;
		 RESULT = new Literal(new Tipo(Tipo.EnumTipo.booleano), false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // E ::= doble 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.EnumTipo.doble), a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // E ::= cadena 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(new Tipo(Tipo.EnumTipo.cadena), a ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // E ::= ID 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Id> a = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Acceso(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // E ::= ID masmas 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Id> a = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExpIncremento ( new Acceso(a), aleft,aright) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // E ::= ID menosmenos 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Id> a = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExpDecremento( new Acceso(a), aleft,aright) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // E ::= ID parizquierdo PARAMETROS_LLAMADA parderecho 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<Id> a = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExpLlamadaMF(new Acceso(a), b, aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // E ::= ID parizquierdo parderecho 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Id> a = (LinkedList<Id>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ExpLlamadaMF(new Acceso(a), aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // E ::= E mas E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Suma(aleft, aright, a, c) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // E ::= E menos E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Resta (a,c, aleft, aright) ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // E ::= E por E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Multiplicacion(a,c, aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // E ::= E division E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Division(a,c,aleft,aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // E ::= E potencia E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Potencia(a,c,aleft,aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // E ::= E modulo E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT  = new Modulo(a,c,aleft,aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E ::= E mayorque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Mayor(a,c,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // E ::= E menorque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Menor(a,c,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // E ::= E mayorigualque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MayorIgual(a,c,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // E ::= E menorigualque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MenorIgual(a,c,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // E ::= E igualigual E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Igual(a,c,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // E ::= E diferenteque E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Diferente(a,c,aleft, aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // E ::= E or E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new O(a,c,aleft,aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // E ::= E and E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Y(a,c,aleft,aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // E ::= E xor E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Xor(a,c,aleft,aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // E ::= not E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =new Not(b, aleft,aright);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // E ::= menos E 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Negativo (a, aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // E ::= parizquierdo E parderecho 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // E ::= rnew T DIMENSIONES_LLENAS 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Integer> b = (LinkedList<Integer>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Arreglo(a, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // E ::= rnew T parizquierdo PARAMETROS_LLAMADA parderecho 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Objeto(a, b , aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // E ::= rnew T parizquierdo parderecho 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Objeto(a,  aleft, aright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // E ::= rnull 
            {
              Expresion RESULT =null;
		 RESULT = new Literal(new Tipo(Tipo.EnumTipo.nulo) , Tipo.EnumTipo.nulo); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("E",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
